# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# @plug duct-linter
# @desc Collection of linter tools.

# @func duct linter editorconfig

declare -r -a _DUCT_LINTER_EDITORCONFIG_EXCLUDE=(
  '\.cer$'
  '\.cert$'
  '\.crt$'
  '\.csr$'
  '\.key$'
  '\.pfx$'
)

declare -r -a _DUCT_LINTER_EDITORCONFIG_FILES=(
  '**/*'
)

declare -r -a _DUCT_LINTER_EDITORCONFIG_OPTIONS=(
  -verbose
)

declare -g -a DUCT_LINTER_EDITORCONFIG_EXCLUDE=( "${DUCT_LINTER_EDITORCONFIG_EXCLUDE[@]:-${_DUCT_LINTER_EDITORCONFIG_EXCLUDE[@]}}" )
declare -g -a DUCT_LINTER_EDITORCONFIG_FILES=( "${DUCT_LINTER_EDITORCONFIG_FILES[@]:-${_DUCT_LINTER_EDITORCONFIG_FILES[@]}}" )
declare -g -a DUCT_LINTER_EDITORCONFIG_OPTIONS=( "${DUCT_LINTER_EDITORCONFIG_OPTIONS[@]:-${_DUCT_LINTER_EDITORCONFIG_OPTIONS[@]}}" )
declare -g DUCT_LINTER_EDITORCONFIG_BINARY="${DUCT_LINTER_EDITORCONFIG_BINARY:-"ec"}"

# @desc Run editorconfig (checker)
# @intl false
# @life main
# @deps duct-run
# @opts [files@]
__duct_linter_editorconfig() {
  local -a EDITORCONFIG_FILES=( "${@:-${DUCT_LINTER_EDITORCONFIG_FILES[@]}}" )

  local -a EDITORCONFIG_LINT=()
  local -a EDITORCONFIG_OPTS=( "${DUCT_LINTER_EDITORCONFIG_OPTIONS[@]}" )
  local EDITORCONFIG_EXCL
  local EDITORCONFIG_ITEM

  # build exclude
  EDITORCONFIG_EXCL="$( IFS="|"; printf "%s" "${DUCT_LINTER_EDITORCONFIG_EXCLUDE[*]}" )"
  EDITORCONFIG_OPTS+=( -exclude "$EDITORCONFIG_EXCL" )

  for EDITORCONFIG_ITEM in "${EDITORCONFIG_FILES[@]}"
  do
    readarray -t -n 0 -O "${#EDITORCONFIG_LINT[@]}" EDITORCONFIG_LINT < <( compgen -G "$EDITORCONFIG_ITEM" )
  done

  if [[ "${#EDITORCONFIG_LINT[@]}" -ge 1 ]]
  then
    __duct_msg n "editorconfig ${EDITORCONFIG_OPTS[*]} ${EDITORCONFIG_FILES[*]}"

    # shellcheck disable=SC2086
    __duct_run "$DUCT_LINTER_EDITORCONFIG_BINARY" "${EDITORCONFIG_OPTS[@]}" \"${EDITORCONFIG_FILES[*]}\"
  else
    __duct_msg w "editorconfig no files! (${EDITORCONFIG_FILES[*]})"
  fi
}

# @func duct linter hadolint

declare -r -a _DUCT_LINTER_HADOLINT_FILES=(
  '**/Containerfile'
  '**/Dockerfile'
)

declare -r -a _DUCT_LINTER_HADOLINT_OPTIONS=(
  --strict-labels
)

declare -g -a DUCT_LINTER_HADOLINT_FILES=( "${DUCT_HADOLINT_FILES[@]:-${_DUCT_LINTER_HADOLINT_FILES[@]}}" )
declare -g -a DUCT_LINTER_HADOLINT_OPTIONS=( "${DUCT_HADOLINT_OPTIONS[@]:-${_DUCT_LINTER_HADOLINT_OPTIONS[@]}}" )
declare -g DUCT_LINTER_HADOLINT_BINARY="${DUCT_HADOLINT_BINARY:-"hadolint"}"
declare -g DUCT_LINTER_HADOLINT_FORMAT="${DUCT_HADOLINT_FORMAT:-"tty"}"

# @desc Run Dockerfile linter `hadolint`.
# @intl false
# @life main
# @deps
# @opts [files@]
__duct_linter_hadolint() {
  local -a HADOLINT_FILES=( "${@:-${DUCT_LINTER_HADOLINT_FILES[@]}}" )

  local -a HADOLINT_LINT=()
  local -a HADOLINT_OPTS=( "${DUCT_LINTER_HADOLINT_OPTIONS[@]}" )
  local HADOLINT_ITEM

  # set format
  HADOLINT_OPTS+=( --format="$DUCT_LINTER_HADOLINT_FORMAT" )

  for HADOLINT_ITEM in "${HADOLINT_FILES[@]}"
  do
    __duct_msg i "add $HADOLINT_ITEM"

    readarray -t -n 0 -O "${#HADOLINT_LINT[@]}" HADOLINT_LINT < <( compgen -G "$HADOLINT_ITEM" )
  done

  if [[ "${#HADOLINT_LINT[@]}" -ge 1 ]]
  then
    __duct_msg n "hadolint ${HADOLINT_OPTS[*]} ${HADOLINT_LINT[*]}"
    __duct_run "$DUCT_LINTER_HADOLINT_BINARY" "${HADOLINT_OPTS[@]}" "${HADOLINT_LINT[@]}"
  else
    __duct_msg w "hadolint no files! (${HADOLINT_FILES[*]})"
  fi
}

# @func duct linter markdownlint

declare -a -r _DUCT_LINTER_MARKDOWNLINT_FILES=(
  '**/*.md'
)

declare -a -r _DUCT_LINTER_MARKDOWNLINT_OPTIONS=(
  --dot
)

declare -g -a DUCT_LINTER_MARKDOWNLINT_FILES=( "${DUCT_LINTER_MARKDOWNLINT_FILES[@]:-${_DUCT_LINTER_MARKDOWNLINT_FILES[@]}}" )
declare -g -a DUCT_LINTER_MARKDOWNLINT_OPTIONS=( "${DUCT_LINTER_MARKDOWNLINT_OPTIONS[@]:-${_DUCT_LINTER_MARKDOWNLINT_OPTIONS[@]}}" )
declare -g DUCT_LINTER_MARKDOWNLINT_BINARY="${DUCT_LINTER_MARKDOWNLINT_BINARY:-"markdownlint"}"

# @desc Run markdown lint `markdownlint`.
# @intl false
# @life main
# @deps
# @opts [files@]
__duct_linter_markdownlint() {
  local -a MARKDOWNLINT_FILES=( "${@:-${DUCT_LINTER_MARKDOWNLINT_FILES[@]}}" )

  local -a MARKDOWNLINT_LINT
  local -a MARKDOWNLINT_OPTS=( "${DUCT_LINTER_MARKDOWNLINT_OPTIONS[@]}" )

  readarray -t -n 0 MARKDOWNLINT_LINT < <( compgen -G "${MARKDOWNLINT_FILES[@]}" )

  if [[ "${#MARKDOWNLINT_LINT[@]}" -ge 1 ]]
  then
    __duct_msg n "markdownlint ${MARKDOWNLINT_OPTS[*]} ${MARKDOWNLINT_FILES[*]}"
    __duct_run "$DUCT_LINTER_MARKDOWNLINT_BINARY" "${MARKDOWNLINT_OPTS[@]}" "${MARKDOWNLINT_LINT[@]}"
  else
    __duct_msg w "no markdownlint files! (${MARKDOWNLINT_FILES[*]})"
  fi
}

# @func duct linter pylint

declare -r -a _DUCT_LINTER_PYLINT_FILES=(
  '**/*.py'
)

declare -r -a _DUCT_LINTER_PYLINT_OPTIONS=(
  --enable-all-extensions
)

declare -g -a DUCT_LINTER_PYLINT_FILES=( "${DUCT_LINTER_PYLINT_FILES[@]:-${_DUCT_LINTER_PYLINT_FILES[@]}}" )
declare -g -a DUCT_LINTER_PYLINT_OPTIONS=( "${DUCT_LINTER_PYLINT_OPTIONS[@]:-${_DUCT_LINTER_PYLINT_OPTIONS[@]}}" )
declare -g DUCT_LINTER_PYLINT_BINARY="${DUCT_LINTER_PYLINT_BINARY:-"pylint"}"
declare -g DUCT_LINTER_PYLINT_FORMAT="${DUCT_LINTER_PYLINT_FORMAT:-"colorized"}"

# @desc Run python linter `pylint`.
# @intl false
# @life main
# @deps duct-msg duct-run
# @opts [files@]
__duct_linter_pylint() {
  local -a PYLINT_FILES=( "${@:-${DUCT_LINTER_PYLINT_FILES[@]}}" )

  local -a PYLINT_LINT
  local -a PYLINT_OPTS=( "${DUCT_LINTER_PYLINT_OPTIONS[@]}" )

  # set format
  PYLINT_OPTS+=( --output-format "$DUCT_LINTER_PYLINT_FORMAT" )

  readarray -t -n 0 PYLINT_LINT < <( compgen -G "${PYLINT_FILES[@]}" )

  if [[ "${#PYLINT_LINT[@]}" -ge 1 ]]
  then
    __duct_msg n "pylint ${PYLINT_OPTS[*]} ${PYLINT_FILES[*]}"
    __duct_run "$DUCT_LINTER_PYLINT_BINARY" "${PYLINT_OPTS[@]}" "${PYLINT_LINT[@]}"
  else
    __duct_msg w "pylint no files! (${PYLINT_FILES[*]})"
  fi
}

# @func duct linter shellcheck

# @fvar
declare -a -r _DUCT_LINTER_SHELLCHECK_FILES=(
  '**/*.sh'
)

# @fvar
declare -a -r _DUCT_LINTER_SHELLCHECK_OPTIONS=(
  --check-sourced
  --color=always
  --external-sources
)

declare -g -a DUCT_LINTER_SHELLCHECK_FILES=( "${DUCT_LINTER_SHELLCHECK_FILES[@]:-${_DUCT_LINTER_SHELLCHECK_FILES[@]}}" )
declare -g -a DUCT_LINTER_SHELLCHECK_OPTIONS=( "${DUCT_LINTER_SHELLCHECK_OPTIONS[@]:-${_DUCT_LINTER_SHELLCHECK_OPTIONS[@]}}" )
declare -g DUCT_LINTER_SHELLCHECK_BINARY="${DUCT_LINTER_SHELLCHECK_BINARY:-"shellcheck"}"
declare -g DUCT_LINTER_SHELLCHECK_FORMAT="${DUCT_LINTER_SHELLCHECK_FORMAT:-"gcc"}"

# @desc Run shell linter `shellcheck`.
# @intl false
# @life main
# @deps duct-msg
# @opts [files@]
__duct_linter_shellcheck() {
  local -a SHELLCHECK_FILES=( "${@:-${DUCT_LINTER_SHELLCHECK_FILES[@]}}" )

  local -a SHELLCHECK_LINT
  local -a SHELLCHECK_OPTS=( "${DUCT_LINTER_SHELLCHECK_OPTIONS[@]}" )

  # set format
  SHELLCHECK_OPTS+=( --format="${DUCT_LINTER_SHELLCHECK_FORMAT}" )

  readarray -t -n 0 SHELLCHECK_LINT < <( compgen -G "${SHELLCHECK_FILES[@]}" )

  if [[ "${#SHELLCHECK_LINT[@]}" -ge 1 ]]
  then
    __duct_msg n "shellcheck ${SHELLCHECK_OPTS[*]} ${SHELLCHECK_FILES[*]}"
    __duct_run "$DUCT_LINTER_SHELLCHECK_BINARY" "${SHELLCHECK_OPTS[@]}" "${SHELLCHECK_LINT[@]}"
  else
    __duct_msg w "no shellcheck files! (${SHELLCHECK_FILES[*]})"
  fi
}

# @func duct yamllint

declare -a -r _DUCT_LINTER_YAMLLINT_OPTIONS=(
  '--strict'
)
declare -r -a _DUCT_LINTER_YAMLLINT_FILES=(
  '**/*.yml'
  '**/*.yaml'
)

declare -g -a DUCT_LINTER_YAMLLINT_FILES=( "${DUCT_LINTER_YAMLLINT_FILES[@]:-${_DUCT_LINTER_YAMLLINT_FILES[@]}}" )
declare -g -a DUCT_LINTER_YAMLLINT_OPTIONS=( "${DUCT_LINTER_YAMLLINT_OPTIONS[@]:-${_DUCT_LINTER_YAMLLINT_OPTIONS[@]}}" )
declare -g DUCT_LINTER_YAMLLINT_BINARY="${DUCT_LINTER_YAMLLINT_BINARY:-"yamllint"}"
declare -g DUCT_LINTER_YAMLLINT_FORMAT="${DUCT_LINTER_YAMLLINT_FORMAT:-"colored"}"

# @desc Run yaml linter `yamllint`.
# @intl false
# @life main
# @deps duct-run
# @opts [files@]
__duct_linter_yamllint() {
  local -a YAMLLINT_FILES=( "${@:-${DUCT_LINTER_YAMLLINT_FILES[@]}}" )

  local -a YAMLLINT_LINT
  local -a YAMLLINT_OPTS=( "${DUCT_LINTER_YAMLLINT_OPTION[@]}" )

  # set format
  YAMLLINT_OPTS+=( --format="$DUCT_LINTER_YAMLLINT_FORMAT" )

  readarray -t -n 0 YAMLLINT_LINT < <( compgen -G "${YAMLLINT_FILES[@]}" )

  if [[ "${#YAMLLINT_LINT[@]}" -ge 1 ]]
  then
    __duct_msg n "yamllint ${YAMLLINT_OPTS[*]} ${YAMLLINT_FILES[*]}"
    __duct_run "$DUCT_LINTER_YAMLLINT_BINARY" "${YAMLLINT_OPTS[@]}" "${YAMLLINT_LINT[@]}"
  else
    __duct_msg w "yamllint no files! (${YAMLLINT_FILES[*]})"
  fi
}

# @func duct tflint

declare -g DUCT_LINTER_TFLINT_BINARY="${DUCT_LINTER_TFLINT_BINARY:-"tflint"}"

# @desc Alias of `duct terraform tflint`.
# @intl false
# @life main
# @deps duct-msg duct-terraform
# @opts
__duct_linter_tflint() {
  __duct_msg w "use 'duct terraform tflint' instead!"
  __duct_terraform_tflint "$@"
}

# @func duct linter load

# @fvar List of duct-linter requirements.
declare -r -a _DUCT_LINTER_LOAD_REQUIREMENTS=(
  "${DUCT_LINTER_EDITORCONFIG_BINARY}"
  "${DUCT_LINTER_HADOLINT_BINARY}"
  "${DUCT_LINTER_MARKDOWNLINT_BINARY}"
  "${DUCT_LINTER_PYLINT_BINARY}"
  "${DUCT_LINTER_SHELLCHECK_BINARY}"
  "${DUCT_LINTER_TFLINT_BINARY}"
  "${DUCT_LINTER_YAMLLINT_BINARY}"
)

# @desc Check duct-linter requirements.
# @intl true
# @life linter
# @deps
# @opts
__duct_linter_load() {
  __duct_intl

  local LINTER_LOAD_RC=0

  __duct_bin_check "${_DUCT_LINTER_LOAD_REQUIREMENTS[@]}" || LINTER_LOAD_RC=$?

  return $LINTER_LOAD_RC
}
