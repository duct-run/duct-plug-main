# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# @plug duct-linter
# @desc Collection of linter tools.

# @func duct linter editorconfig

# @fvar List of editorconfig excludes (defaults).
declare -r -a _DUCT_LINTER_EDITORCONFIG_EXCLUDE=(
  '\.cer$'
  '\.cert$'
  '\.crt$'
  '\.csr$'
  '\.key$'
  '\.pfx$'
)

# @fvar List of editorconfig files to lint (defaults).
declare -r -a _DUCT_LINTER_EDITORCONFIG_FILES=()

# @fvar List of editorconfig options (defaults).
declare -r -a _DUCT_LINTER_EDITORCONFIG_OPTIONS=(
  -verbose
)

# @fvar List of editorconfig excludes.
declare -g -a DUCT_LINTER_EDITORCONFIG_EXCLUDE=( "${DUCT_LINTER_EDITORCONFIG_EXCLUDE[@]:-${_DUCT_LINTER_EDITORCONFIG_EXCLUDE[@]}}" )

# shellcheck disable=SC2206
# @fvar List of editorconfig files to lint.
declare -g -a DUCT_LINTER_EDITORCONFIG_FILES=( ${DUCT_LINTER_EDITORCONFIG_FILES[@]:-${_DUCT_LINTER_EDITORCONFIG_FILES[@]}} )

# @fvar List of editorconfig options.
declare -g -a DUCT_LINTER_EDITORCONFIG_OPTIONS=( "${DUCT_LINTER_EDITORCONFIG_OPTIONS[@]:-${_DUCT_LINTER_EDITORCONFIG_OPTIONS[@]}}" )

# @fvar Editorconfig binary to use.
declare -g DUCT_LINTER_EDITORCONFIG_BINARY="${DUCT_LINTER_EDITORCONFIG_BINARY:-"ec"}"

# @fvar Editorconfig config file.
declare -g DUCT_LINTER_EDITORCONFIG_CONFIG="${DUCT_LINTER_EDITORCONFIG_CONFIG:-}"

# @desc Run editorconfig (checker)
# @intl false
# @life main
# @deps duct-run
# @opts
__duct_linter_editorconfig() {
  local -a EDITORCONFIG_FILES=( "${@:-${DUCT_LINTER_EDITORCONFIG_FILES[@]}}" )
  local -a EDITORCONFIG_OPTIONS=( "${DUCT_LINTER_EDITORCONFIG_OPTIONS[@]}" )
  local EDITORCONFIG_EXCLUDE

  __duct_bin_check "$DUCT_LINTER_EDITORCONFIG_BINARY"

  if [[ -n "${DUCT_LINTER_EDITORCONFIG_CONFIG}" ]]
  then
    EDITORCONFIG_OPTIONS+=( "-config $DUCT_LINTER_EDITORCONFIG_CONFIG" )
  fi

  # build exclude options
  EDITORCONFIG_EXCLUDE="$( IFS="|"; printf "%s" "${DUCT_LINTER_EDITORCONFIG_EXCLUDE[*]}" )"
  EDITORCONFIG_OPTIONS+=( -exclude "${EDITORCONFIG_EXCLUDE}" )

  __duct_run "$DUCT_LINTER_EDITORCONFIG_BINARY" "${EDITORCONFIG_OPTIONS[@]}" "${EDITORCONFIG_FILES[@]}"
}
readonly -f __duct_linter_editorconfig

# @func duct linter hadolint

declare -g DUCT_LINTER_HADOLINT_BINARY="${DUCT_HADOLINT_BINARY:-"hadolint"}"
declare -g DUCT_LINTER_HADOLINT_CONFIG="${DUCT_HADOLINT_CONFIG:-}"
declare -g DUCT_LINTER_HADOLINT_FORMAT="${DUCT_HADOLINT_FORMAT:-"gnu"}"

declare -g -a DUCT_LINTER_HADOLINT_FILES=( "${DUCT_HADOLINT_FILES[@]:-}" )
declare -g -a DUCT_LINTER_HADOLINT_OPTIONS=( "${DUCT_HADOLINT_OPTIONS[@]:-}" )

# @desc
# @intl
# @life
# @deps
# @opts
__duct_linter_hadolint() {
  local -a HADOLINT_FILES=( "${@:-${DUCT_LINTER_HADOLINT_FILES[@]}}" )

  __duct_bin_check "$DUCT_HADOLINT_BINARY"
}

# @func duct linter markdownlint

declare -a -r _DUCT_LINTER_MARKDOWNLINT_DISABLE=()
declare -a -r _DUCT_LINTER_MARKDOWNLINT_ENABLE=()
declare -a -r _DUCT_LINTER_MARKDOWNLINT_FILES=( '**/*.md' )
declare -a -r _DUCT_LINTER_MARKDOWNLINT_IGNORE=()
declare -a -r _DUCT_LINTER_MARKDOWNLINT_OPTIONS=( '--dot' )

declare -g -a DUCT_LINTER_MARKDOWNLINT_DISABLE=( ${DUCT_LINTER_MARKDOWNLINT_DISABLE[@]:-${_DUCT_LINTER_MARKDOWNLINT_DISABLE[@]}} )
declare -g -a DUCT_LINTER_MARKDOWNLINT_ENABLE=( ${DUCT_LINTER_MARKDOWNLINT_ENABLE[@]:-${_DUCT_LINTER_MARKDOWNLINT_ENABLE[@]}} )
declare -g -a DUCT_LINTER_MARKDOWNLINT_FILES=( "${DUCT_LINTER_MARKDOWNLINT_FILES[@]:-${_DUCT_LINTER_MARKDOWNLINT_FILES[@]}}" )
declare -g -a DUCT_LINTER_MARKDOWNLINT_IGNORE=( ${DUCT_LINTER_MARKDOWNLINT_IGNORE[@]:-${_DUCT_LINTER_MARKDOWNLINT_IGNORE[@]}} )
declare -g -a DUCT_LINTER_MARKDOWNLINT_OPTIONS=( "${DUCT_LINTER_MARKDOWNLINT_OPTIONS[@]:-${_DUCT_LINTER_MARKDOWNLINT_OPTIONS[@]}}" )

declare -g DUCT_LINTER_MARKDOWNLINT_BINARY="${DUCT_LINTER_MARKDOWNLINT_BINARY:-"markdownlint"}"
declare -g DUCT_LINTER_MARKDOWNLINT_CONFIG="${DUCT_LINTER_MARKDOWNLINT_CONFIG:-}"
declare -g DUCT_LINTER_MARKDOWNLINT_JSON="${DUCT_LINTER_MARKDOWNLINT_JSON:-false}"

# @desc Run markdown lint `markdownlint`.
# @intl false
# @life main
# @deps
# @opts [files]
__duct_linter_markdownlint() {
  local -a MARKDOWNLINT_FILES=( "${@:-${DUCT_LINTER_MARKDOWNLINT_FILES[@]}}" )
  local -a MARKDOWNLINT_OPTIONS=( "${DUCT_LINTER_MARKDOWNLINT_OPTIONS[@]}" )
  local MARKDOWNLINT_IGNORE

  if [[ "${#DUCT_LINTER_MARKDOWNLINT_DISABLE[@]}" -gt 0 ]]
  then
    MARKDOWNLINT_OPTIONS+=( --disable "${DUCT_LINTER_MARKDOWNLINT_DISABLE[*]}" -- )
  fi

  if [[ "${#DUCT_LINTER_MARKDOWNLINT_ENABLE[@]}" -gt 0 ]]
  then
    MARKDOWNLINT_OPTIONS+=( --enable "${DUCT_LINTER_MARKDOWNLINT_ENABLE[*]}" -- )
  fi

  if [[ "${#DUCT_LINTER_MARKDOWNLINT_IGNORE[@]}" -gt 0 ]]
  then
    for MARKDOWNLINT_IGNORE in "${DUCT_LINTER_MARKDOWNLINT_IGNORE[@]}"
    do
      MARKDOWNLINT_OPTIONS+=( --ignore "$MARKDOWNLINT_IGNORE" )
    done
  fi

  if [[ "${DUCT_LINTER_MARKDOWNLINT_JSON}" == true ]]
  then
    MARKDOWNLINT_OPTIONS+=( --json )
  fi

  __duct_bin_check "$DUCT_LINTER_MARKDOWNLINT_BINARY"
  __duct_run "$DUCT_LINTER_MARKDOWNLINT_BINARY" "${MARKDOWNLINT_OPTIONS[@]}" "${MARKDOWNLINT_FILES[@]}"
}

# @func duct linter pylint

declare -r -a _DUCT_LINTER_PYLINT_OPTIONS=()

declare -g -a DUCT_LINTER_PYLINT_OPTIONS=( ${DUCT_LINTER_PYLINT_OPTIONS[@]:-${_DUCT_LINTER_PYLINT_OPTIONS[@]}} )

declare -g DUCT_LINTER_PYLINT_BINARY="${DUCT_LINTER_PYLINT_BINARY:-"pylint"}"

__duct_linter_pylint() { :; }


# @func duct linter shellcheck

# @fvar
declare -a -r _DUCT_LINTER_SHELLCHECK_FILES=(
  '**/*.sh'
)

# @fvar
declare -a -r _DUCT_LINTER_SHELLCHECK_OPTIONS=(
  --check-sourced
  --color=always
  --external-sources
)

declare -g DUCT_LINTER_SHELLCHECK_BINARY="${DUCT_LINTER_SHELLCHECK_BINARY:-"shellcheck"}"
declare -g DUCT_LINTER_SHELLCHECK_FORMAT="${DUCT_LINTER_SHELLCHECK_FORMAT:-"gcc"}"

declare -g -a DUCT_LINTER_SHELLCHECK_FILES=( "${DUCT_LINTER_SHELLCHECK_FILES[@]:-${_DUCT_LINTER_SHELLCHECK_FILES[@]}}" )
declare -g -a DUCT_LINTER_SHELLCHECK_OPTIONS=( "${DUCT_LINTER_SHELLCHECK_OPTIONS[@]:-${_DUCT_LINTER_SHELLCHECK_OPTIONS[@]}}" )

# @desc Run shell linter `shellcheck`.
# @intl false
# @life main
# @deps duct-msg
# @opts [files@]
__duct_linter_shellcheck() {
  local -a SHELLCHECK_FILES=( "${@:-${DUCT_LINTER_SHELLCHECK_FILES[@]}}" )

  local -a SHELLCHECK_OPTIONS=( "${DUCT_LINTER_SHELLCHECK_OPTIONS[@]}" )
  local -i SHELLCHECK_RC=0
  local SHELLCHECK_FILE

  __duct_bin_check "$DUCT_LINTER_SHELLCHECK_BINARY"

  # set format
  SHELLCHECK_OPTIONS+=( --format="${DUCT_LINTER_SHELLCHECK_FORMAT}" )

  # shellcheck disable=SC2068
  for SHELLCHECK_FILE in ${SHELLCHECK_FILES[@]}
  do
    __duct_msg n "check $SHELLCHECK_FILE"
    __duct_run "$DUCT_LINTER_SHELLCHECK_BINARY" "${SHELLCHECK_OPTIONS[@]}" "$SHELLCHECK_FILE" || (( SHELLCHECK_RC+=$? ))
  done

  if [[ "$SHELLCHECK_RC" -ge 1 ]]
  then
    return 1
  fi
}

# @func duct yamllint
declare -a -r _DUCT_LINTER_YAMLLINT_OPTIONS=(
  '--strict'
)

declare -g DUCT_LINTER_YAMLLINT_BINARY="${DUCT_LINTER_YAMLLINT_BINARY:-"yamllint"}"
declare -g DUCT_LINTER_YAMLLINT_CONFIG="${DUCT_LINTER_YAMLLINT_CONFIG:-}"
declare -g DUCT_LINTER_YAMLLINT_FORMAT="${DUCT_LINTER_YAMLLINT_FORMAT:-"parsable"}"

declare -g -a DUCT_LINTER_YAMLLINT_FILES=( "${DUCT_LINTER_YAMLLINT_FILES[@]:-}" )
declare -g -a DUCT_LINTER_YAMLLINT_OPTIONS=( "${DUCT_LINTER_YAMLLINT_OPTIONS[@]:-}" )

# @desc Run yaml linter `yamllint`.
# @intl false
# @life main
# @deps duct-run
# @opts
__duct_linter_yamllint() { :; }

# @func duct tflint

# @desc Alias of `duct terraform tflint`.
# @intl false
# @life main
# @deps duct-msg duct-terraform
# @opts
__duct_linter_tflint() {
  __duct_msg w "use 'duct terraform tflint' instead!"
  __duct_terraform_tflint "$@"
}

# @func duct linter load

# @fvar List of duct-linter requirements.
declare -r -a _DUCT_LINTER_LOAD_REQUIREMENTS=(
  "${DUCT_LINTER_EDITORCONFIG_BINARY}"
  "${DUCT_LINTER_HADOLINT_BINARY}"
  "${DUCT_LINTER_MARKDOWNLINT_BINARY}"
  "${DUCT_LINTER_PYLINT_BINARY}"
  "${DUCT_LINTER_SHELLCHECK_BINARY}"
  "${DUCT_LINTER_YAMLLINT_BINARY}"
)

# @desc Check duct-linter requirements.
# @intl true
# @life linter
# @deps
# @opts
__duct_linter_load() {
  __duct_intl

  local LINTER_LOAD_RC=0

  __duct_bin_check "${_DUCT_LINTER_LOAD_REQUIREMENTS[@]}" || LINTER_LOAD_RC=$?

  return $LINTER_LOAD_RC
}
