# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# @plug duct-terraform
# @desc Terraform operations.

# @pvar Terraform registry URL.
declare -g DUCT_TERRAFORM_REGISTRY_URL="${DUCT_TERRAFORM_REGISTRY_URL:-"https://registry.terraform.io"}"

# @pvar Terraform release URL.
declare -g DUCT_TERRAFORM_RELEASE_URL="${DUCT_TERRAFORM_RELEASE_URL:-"https://api.releases.hashicorp.com/v1/releases"}"

# @pvar Terraform global work dir.
declare -g DUCT_TERRAFORM_WRKDIR="${DUCT_TERRAFORM_WRKDIR:-$PWD}"

# @pvar Terraform global change dir.
declare -g DUCT_TERRAFORM_CHDIR="${DUCT_TERRAFORM_CHDIR:-"tests/duct"}"

# @func duct terraform config

# shellcheck disable=SC2016
declare -r -a _DUCT_TERRAFORM_CONFIG_OPTIONS=(
  "disable_checkpoint=true"
  "plugin_cache_dir=${DUCT_TERRAFORM_WRKDIR}/.terraform.d/plugin-cache"
)

declare -r -a _DUCT_TERRAFORM_CONFIG_CREDENTIALS=()

declare -g _DUCT_TERRAFORM_CONFIG_DONE="${_DUCT_TERRAFORM_CONFIG_DONE:-false}"

declare -g -a DUCT_TERRAFORM_CONFIG_OPTIONS=( "${DUCT_TERRAFORM_CONFIG_OPTIONS[@]:-${_DUCT_TERRAFORM_CONFIG_OPTIONS[@]}}" )

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_CONFIG_CREDENTIALS=( ${DUCT_TERRAFORM_CONFIG_CREDENTIALS[@]:-${_DUCT_TERRAFORM_CONFIG_CREDENTIALS[@]}} )

declare -g DUCT_TERRAFORM_CONFIG_FILE="${DUCT_TERRAFORM_CONFIG_FILE:-"$HOME/.terraformrc"}"
declare -g DUCT_TERRAFORM_CONFIG_MASK="${DUCT_TERRAFORM_CONFIG_MASK:-true}"
declare -g DUCT_TERRAFORM_CONFIG_MASK_STRING="${DUCT_TERRAFORM_CONFIG_MASK_STRING:-"[TFSECRET]"}"
declare -g DUCT_TERRAFORM_CONFIG_REPLACE="${DUCT_TERRAFORM_CONFIG_REPLACE:-true}"

declare -g DUCT_TERRAFORM_CONFIG_NETWORK_MIRROR="${DUCT_TERRAFORM_CONFIG_NETWORK_MIRROR:-}"

# @desc
# @intl false
# @life main
# @deps duct-msg duct-run duct-tools
# @opts
__duct_terraform_config() {
  local -a TF_CONFIG=()
  local TF_CONFIG_ITEM
  local TF_CONFIG_KEY
  local TF_CONFIG_SET
  local TF_CONFIG_VAL

  local TF_CONFIG_CACHE

  if [[ "${#DUCT_TERRAFORM_CONFIG_OPTIONS}" -ge 1 ]]
  then
    if [[ "$_DUCT_TERRAFORM_CONFIG_DONE" == false ]]
    then

      if [[ "$DUCT_TERRAFORM_CONFIG_REPLACE" != true && -f "$DUCT_TERRAFORM_CONFIG_FILE" ]]
      then
        __duct_msg w "$DUCT_TERRAFORM_CONFIG_FILE exists!"
        return
      fi

      __duct_msg n "creating $DUCT_TERRAFORM_CONFIG_FILE"

      for TF_CONFIG_ITEM in "${DUCT_TERRAFORM_CONFIG_OPTIONS[@]}"
      do
        if [[ "$TF_CONFIG_ITEM" =~ (=) ]]
        then
          TF_CONFIG_KEY="$( __duct_trim "${TF_CONFIG_ITEM%%=*}" )"
          TF_CONFIG_VAL="$( __duct_trim "${TF_CONFIG_ITEM##*=}" )"
          TF_CONFIG_SET="="
        else
          TF_CONFIG_KEY="$TF_CONFIG_ITEM"
          TF_CONFIG_VAL=""
          TF_CONFIG_SET=""
        fi

        # plugin cache dir
        if [[ "$TF_CONFIG_KEY" == "plugin_cache_dir" ]]
        then
          TF_CONFIG_CACHE="$( eval echo "$TF_CONFIG_VAL" )"

          if [[ ! -d "$TF_CONFIG_CACHE" ]]
          then
            __duct_run mkdir -p "$TF_CONFIG_CACHE"
          fi
        fi

        if [[ "$DUCT_TERRAFORM_CONFIG_MASK" == true && "$TF_CONFIG_KEY" =~ (password|token|secret) ]]
        then
          __duct_msg d "${TF_CONFIG_KEY}${TF_CONFIG_SET}${DUCT_TERRAFORM_CONFIG_MASK_STRING}"
        else
          __duct_msg d "${TF_CONFIG_KEY}${TF_CONFIG_SET}${TF_CONFIG_VAL}"
        fi

        if [[ -n "$TF_CONFIG_SET" && "$TF_CONFIG_VAL" =~ (true|false|yes|no) ]]
        then
          TF_CONFIG+=(
            "${TF_CONFIG_KEY}${TF_CONFIG_SET}${TF_CONFIG_VAL}"
          )

        elif [[ -n "$TF_CONFIG_SET" ]]
        then
          TF_CONFIG+=(
            "${TF_CONFIG_KEY}${TF_CONFIG_SET}\"${TF_CONFIG_VAL}\""
          )
        else
          TF_CONFIG+=(
            "$TF_CONFIG_KEY"
          )
        fi
      done

      if [[ -n "$DUCT_TERRAFORM_CONFIG_NETWORK_MIRROR" ]]
      then
        __duct_msg d "add network mirror $DUCT_TERRAFORM_CONFIG_NETWORK_MIRROR"

        TF_CONFIG+=(
          'provider_installation {'
          'network_mirror {'
          "url=\"$DUCT_TERRAFORM_CONFIG_NETWORK_MIRROR\""
          '}'
          '}'
        )
      fi

      if [[ "${#DUCT_TERRAFORM_CONFIG_CREDENTIALS[@]}" -gt 0 ]]
      then
        for TF_CONFIG_ITEM in "${DUCT_TERRAFORM_CONFIG_CREDENTIALS[@]}"
        do
          TF_CONFIG_KEY="$( __duct_trim "${TF_CONFIG_ITEM%%::*}" )"
          TF_CONFIG_VAL="$( __duct_trim "${TF_CONFIG_ITEM#*::}" )"
          TF_CONFIG_VAL="$( __duct_debase64 "$TF_CONFIG_VAL" )"

          __duct_msg d "add credentials for $TF_CONFIG_KEY"

          TF_CONFIG+=(
            "credentials \"$TF_CONFIG_KEY\" {"
            "token=\"$TF_CONFIG_VAL\""
            "}"
          )
        done
      fi

      printf "%b\n" "${TF_CONFIG[@]}" | __duct_run "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY" fmt - > "$DUCT_TERRAFORM_CONFIG_FILE"
      _DUCT_TERRAFORM_CONFIG_DONE=true
    fi
  else
    __duct_msg d "no config"
  fi
}

# @func duct terraform run

declare -g _DUCT_TERRAFORM_RUN_TERRAFORM_VERSION_DONE="${_DUCT_TERRAFORM_RUN_TERRAFORM_VERSION_DONE:-false}"
declare -g _DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION_DONE="${_DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION_DONE:-false}"
declare -g _DUCT_TERRAFORM_RUN_TFLINT_VERSION_DONE="${_DUCT_TERRAFORM_RUN_TFLINT_VERSION_DONE:-false}"
declare -g _DUCT_TERRAFORM_RUN_TFSEC_VERSION_DONE="${_DUCT_TERRAFORM_RUN_TFSEC_VERSION_DONE:-false}"
declare -g _DUCT_TERRAFORM_RUN_TFSWITCH_VERSION_DONE="${_DUCT_TERRAFORM_RUN_TFSWITCH_VERSION_DONE:-false}"

declare -g DUCT_TERRAFORM_RUN_OUTPUT="${DUCT_TERRAFORM_RUN_OUTPUT:-true}"
declare -g DUCT_TERRAFORM_RUN_TERRAFORM_BINARY="${DUCT_TERRAFORM_RUN_TERRAFORM_BINARY:-"terraform"}"
declare -g DUCT_TERRAFORM_RUN_TERRAFORM_VERSION="${DUCT_TERRAFORM_RUN_TERRAFORM_VERSION:-false}"
declare -g DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_BINARY="${DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_BINARY:-"terraform-docs"}"
declare -g DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION="${DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION:-false}"
declare -g DUCT_TERRAFORM_RUN_TFLINT_BINARY="${DUCT_TERRAFORM_RUN_TFLINT_BINARY:-"tflint"}"
declare -g DUCT_TERRAFORM_RUN_TFLINT_VERSION="${DUCT_TERRAFORM_RUN_TFLINT_VERSION:-false}"
declare -g DUCT_TERRAFORM_RUN_TFSEC_BINARY="${DUCT_TERRAFORM_RUN_TFSEC_BINARY:-"tfsec"}"
declare -g DUCT_TERRAFORM_RUN_TFSEC_VERSION="${DUCT_TERRAFORM_RUN_TFSEC_VERSION:-false}"
declare -g DUCT_TERRAFORM_RUN_TFSWITCH_BINARY="${DUCT_TERRAFORM_RUN_TFSWITCH_BINARY:-"tfswitch"}"
declare -g DUCT_TERRAFORM_RUN_TFSWITCH_VERSION="${DUCT_TERRAFORM_RUN_TFSWITCH_VERSION:-false}"
declare -g DUCT_TERRAFORM_RUN_WORKSPACE="${DUCT_TERRAFORM_RUN_WORKSPACE:-}"

# @desc
# @intl true
# @life main
# @deps duct-msg duct-run
# @opts <terraform-command> [terraform-options]
__duct_terraform_run() {
  local TF_RUN_CMD="${1:-}"
  shift
  local -a TF_RUN_OPTS=( "$@" )

  local -a TF_RUN_CHDIR=()
  local -a TF_RUN_MATCH=()
  local -a TF_RUN_RCMD
  local -a TF_RUN_TEMP=()
  local TF_RUN_HOPT
  local TF_RUN_ITEM
  local TF_RUN_OUT
  local TF_RUN_PCMD

  if [[ "$TF_RUN_CMD" == "terraform-docs" ]]
  then
    if [[ "$DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION" == true && "$_DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION_DONE" == false ]]
    then
      __duct_msg n "$TF_RUN_CMD --version"
      __duct_run "$DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_BINARY" --version
      _DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_VERSION_DONE=true
    fi

    __duct_msg n "$TF_RUN_CMD ${TF_RUN_OPTS[*]}"
    __duct_run "$DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_BINARY" "${TF_RUN_OPTS[@]}"

  elif [[ "$TF_RUN_CMD" == "tflint" ]]
  then
    if [[ "$DUCT_TERRAFORM_RUN_TFLINT_VERSION" == true && "$_DUCT_TERRAFORM_RUN_TFLINT_VERSION_DONE" == false ]]
    then
      __duct_msg n "tflint --version"
      __duct_run "$DUCT_TERRAFORM_RUN_TFLINT_BINARY" --version
      _DUCT_TERRAFORM_RUN_TFLINT_VERSION_DONE=true
    fi

    __duct_msg n "$TF_RUN_CMD ${TF_RUN_OPTS[*]}"
    __duct_run "$DUCT_TERRAFORM_RUN_TFLINT_BINARY" "${TF_RUN_OPTS[@]}"

  elif [[ "$TF_RUN_CMD" == "tfsec" ]]
  then
    if [[ "$DUCT_TERRAFORM_RUN_TFSEC_VERSION" == true && "$_DUCT_TERRAFORM_RUN_TFSEC_VERSION_DONE" == false ]]
    then
      __duct_msg n "tfsec --version"
      __duct_run "$DUCT_TERRAFORM_RUN_TFSEC_BINARY" --version
      _DUCT_TERRAFORM_RUN_TFSEC_VERSION_DONE=true
    fi

    __duct_msg n "$TF_RUN_CMD" "${TF_RUN_OPTS[*]}"
    __duct_run "$DUCT_TERRAFORM_RUN_TFSEC_BINARY" "${TF_RUN_OPTS[@]}"

  elif [[ "$TF_RUN_CMD" == "tfswitch" ]]
  then
    if [[ "$DUCT_TERRAFORM_RUN_TFSWITCH_VERSION" == true && "$_DUCT_TERRAFORM_RUN_TFSWITCH_VERSION_DONE" == false ]]
    then
      __duct_msg n "tfswitch --version"
      __duct_run "$DUCT_TERRAFORM_RUN_TFSWITCH_BINARY"
    fi

    __duct_msg n "$TF_RUN_CMD" "${TF_RUN_OPTS[*]}"
    __duct_run "$DUCT_TERRAFORM_RUN_TFSWITCH_BINARY" "${TF_RUN_OPTS[@]}"
  else
    # terraform chdir
    if [[ -n "$DUCT_TERRAFORM_CHDIR" && -d "$DUCT_TERRAFORM_CHDIR" ]]
    then
      # skip chdir for fmt
      if [[ "$TF_RUN_CMD" != "fmt" ]]
      then
        TF_RUN_CHDIR+=( -chdir="$DUCT_TERRAFORM_CHDIR" )
      fi
    fi

    # environment variables <https://www.terraform.io/docs/cli/config/environment-variables.html>
    export TF_IN_AUTOMATION=true

    unset TF_CLI_ARGS
    unset TF_CLI_CONFIG_FILE

    if [[ "$DUCT_TERRAFORM_RUN_TERRAFORM_VERSION" == true && "$_DUCT_TERRAFORM_RUN_TERRAFORM_VERSION_DONE" == false ]]
    then
      __duct_msg n "terraform -version"
      __duct_run "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY" -version
      _DUCT_TERRAFORM_RUN_TERRAFORM_VERSION_DONE=true
    fi

    # print command
    TF_RUN_PCMD="$TF_RUN_CMD"

    # real command
    TF_RUN_RCMD=( "$TF_RUN_CMD" )

    # handle destroy
    if [[ ${TF_RUN_OPTS[*]} =~ (-destroy) ]]
    then
      TF_RUN_PCMD+="-destroy"
    fi

    # output file
    TF_RUN_OUT="terraform-${TF_RUN_PCMD}.out"

    # handle replace & target
    if [[ "${TF_RUN_OPTS[*]}" =~ (-replace|-target) ]]
    then
      TF_RUN_HOPT="${BASH_REMATCH[-1]}"
      TF_RUN_PCMD+="$TF_RUN_HOPT"

      # multi-resource
      for TF_RUN_ITEM in "${!TF_RUN_OPTS[@]}"
      do
        if [[ "${TF_RUN_OPTS[TF_RUN_ITEM]}" =~ ^(${TF_RUN_HOPT}=(.*)) ]]
        then
          unset "TF_RUN_OPTS[TF_RUN_ITEM]"

          IFS="," read -r -a TF_RUN_TEMP <<< "${BASH_REMATCH[-1]//*([[:space:]])/}"
          TF_RUN_MATCH+=( "${TF_RUN_TEMP[@]/#/${TF_RUN_HOPT}=}" )
        fi
      done

      # rewrite opts
      TF_RUN_OPTS=( "${TF_RUN_MATCH[@]}" "${TF_RUN_OPTS[@]}" )
    fi

    if [[ "${#TF_RUN_CHDIR[@]}" -gt 0 ]]
    then
      __duct_msg n "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY ${TF_RUN_CHDIR[*]} $TF_RUN_CMD ${TF_RUN_OPTS[*]}"
    else
      __duct_msg n "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY $TF_RUN_CMD ${TF_RUN_OPTS[*]}"
    fi

    if [[ "$DUCT_TERRAFORM_RUN_OUTPUT" == true ]]
    then
      DUCT_RUN_OUTPUT="$TF_RUN_OUT" \
        __duct_run output "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY" "${TF_RUN_CHDIR[@]}" "${TF_RUN_RCMD[@]}" "${TF_RUN_OPTS[@]}"

      __duct_terraform_run_out2json "$TF_RUN_PCMD" "$TF_RUN_OUT"
    else
      __duct_run "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY" "${TF_RUN_CHDIR[@]}" "${TF_RUN_RCMD[@]}" "${TF_RUN_OPTS[@]}"
    fi

    unset TF_IN_AUTOMATION
  fi
}

# @func duct terraform run out2json

declare -g DUCT_TERRAFORM_RUN_OUT2JSON_REMOVE_OUTPUT="${DUCT_TERRAFORM_RUN_OUT2JSON_REMOVE_OUTPUT:-false}"

# @desc Parse Terraform run output file to JSON (GitLab report compatible).
# @intl true
# @life main
# @deps duct-msg
# @opts <terraform-command>
__duct_terraform_run_out2json() {
  local TF_RUN_OUT2JSON_CMD="${1:-}"
  local TF_RUN_OUT2JSON_OUT="${2:-}"

  local -A TF_RUN_OUT2JSON_INFO
  local -a TF_RUN_OUT2JSON_DATA
  local -a TF_RUN_OUT2JSON_JSON
  local TF_RUN_OUT2JSON_FILE
  local TF_RUN_OUT2JSON_LINE
  local TF_RUN_OUT2JSON_MATCH

  # defaults
  TF_RUN_OUT2JSON_INFO["create"]=0
  TF_RUN_OUT2JSON_INFO["update"]=0
  TF_RUN_OUT2JSON_INFO["delete"]=0

  case "$TF_RUN_OUT2JSON_CMD"
  in
    plan)
      if [[ "$DUCT_TERRAFORM_PLAN_JSON" != true ]]
      then
        return
      fi

      TF_RUN_OUT2JSON_MATCH='(Plan: ([0-9]+) to add, ([0-9]+) to change, ([0-9]+) to destroy.)'
      TF_RUN_OUT2JSON_FILE="$DUCT_TERRAFORM_PLAN_JSON_FILE"
    ;;
    plan-destroy)
      if [[ "$DUCT_TERRAFORM_PLAN_DESTROY_JSON" != true ]]
      then
        return
      fi

      TF_RUN_OUT2JSON_MATCH='(Plan: ([0-9]+) to add, ([0-9]+) to change, ([0-9]+) to destroy.)'
      TF_RUN_OUT2JSON_FILE="$DUCT_TERRAFORM_PLAN_DESTROY_JSON_FILE"
    ;;
    plan-target)
      if [[ "$DUCT_TERRAFORM_PLAN_TARGET_JSON" != true ]]
      then
        return
      fi

      TF_RUN_OUT2JSON_MATCH='(Plan: ([0-9]+) to add, ([0-9]+) to change, ([0-9]+) to destroy.)'
      TF_RUN_OUT2JSON_FILE="$DUCT_TERRAFORM_PLAN_TARGET_JSON_FILE"
    ;;

    apply)
      if [[ "$DUCT_TERRAFORM_APPLY_JSON" != true ]]
      then
        return
      fi

      TF_RUN_OUT2JSON_MATCH='(Apply complete! Resources: ([0-9]+) added, ([0-9]+) changed, ([0-9]+) destroyed.)'
      TF_RUN_OUT2JSON_FILE="$DUCT_TERRAFORM_APPLY_JSON_FILE"
    ;;
    apply-destroy)
      if [[ "$DUCT_TERRAFORM_APPLY_DESTROY_JSON" != true ]]
      then
        return
      fi

      TF_RUN_OUT2JSON_MATCH='(Apply complete! Resources: ([0-9]+) added, ([0-9]+) changed, ([0-9]+) destroyed.)'
      TF_RUN_OUT2JSON_FILE="$DUCT_TERRAFORM_APPLY_DESTROY_JSON_FILE"
    ;;
    destroy)
      if [[ "$DUCT_TERRAFORM_DESTROY_JSON" != true ]]
      then
        return
      fi

      TF_RUN_OUT2JSON_MATCH='(Destroy complete! Resources: ([0-9]+) destroyed.)'
      TF_RUN_OUT2JSON_FILE="$DUCT_TERRAFORM_DESTROY_JSON_FILE"
    ;;
    *)
      return
    ;;
  esac

  mapfile -t -n 0 TF_RUN_OUT2JSON_DATA < "$TF_RUN_OUT2JSON_OUT"

  for TF_RUN_OUT2JSON_LINE in "${TF_RUN_OUT2JSON_DATA[@]}"
  do
    # remove ANSI escape codes
    TF_RUN_OUT2JSON_LINE="${TF_RUN_OUT2JSON_LINE//$'\e'\[*([0-9;])m/}"

    if [[ "$TF_RUN_OUT2JSON_LINE" =~ $TF_RUN_OUT2JSON_MATCH ]]
    then
      local -a _REMATCH=( "${BASH_REMATCH[@]}" )

      if [[ "$TF_RUN_OUT2JSON_CMD" =~ (plan|apply) ]]
      then
        TF_RUN_OUT2JSON_INFO["create"]="${_REMATCH[-3]}"
        TF_RUN_OUT2JSON_INFO["update"]="${_REMATCH[-2]}"
        TF_RUN_OUT2JSON_INFO["delete"]="${_REMATCH[-1]}"

      elif [[ "$TF_RUN_OUT2JSON_CMD" == "destroy" ]]
      then
        TF_RUN_OUT2JSON_INFO["delete"]="${_REMATCH[-1]}"
      fi
    fi
  done

  TF_RUN_OUT2JSON_JSON=(
    "{"
    "  \"create\": ${TF_RUN_OUT2JSON_INFO["create"]},"
    "  \"update\": ${TF_RUN_OUT2JSON_INFO["update"]},"
    "  \"delete\": ${TF_RUN_OUT2JSON_INFO["delete"]}"
    "}"
  )

  __duct_msg n "creating $TF_RUN_OUT2JSON_FILE"
  printf "%s\n" "${TF_RUN_OUT2JSON_JSON[@]}" > "$TF_RUN_OUT2JSON_FILE"

  __duct_msg d "${TF_RUN_OUT2JSON_JSON[@]}"

  if [[ "$DUCT_TERRAFORM_RUN_OUT2JSON_REMOVE_OUTPUT" == true && -f "$TF_RUN_OUT2JSON_OUT" ]]
  then
    __duct_run rm "$TF_RUN_OUT2JSON_OUT"
  fi
}

# @func duct terraform backend

declare -r -a _DUCT_TERRAFORM_BACKEND_CONFIG=()

declare -g _DUCT_TERRAFORM_BACKEND_DONE="${_DUCT_TERRAFORM_BACKEND_DONE:-false}"

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_BACKEND_CONFIG=( ${DUCT_TERRAFORM_BACKEND_CONFIG[@]:-${_DUCT_TERRAFORM_BACKEND_CONFIG[@]}} )

declare -g DUCT_TERRAFORM_BACKEND_FILE="${DUCT_TERRAFORM_BACKEND_FILE:-"terraform-backend.tf"}"
declare -g DUCT_TERRAFORM_BACKEND_MASK="${DUCT_TERRAFORM_BACKEND_MASK:-true}"
declare -g DUCT_TERRAFORM_BACKEND_MASK_STRING="${DUCT_TERRAFORM_BACKEND_MASK_STRING:-"[TFSECRET]"}"
declare -g DUCT_TERRAFORM_BACKEND_REPLACE="${DUCT_TERRAFORM_BACKEND_REPLACE:-true}"
declare -g DUCT_TERRAFORM_BACKEND_TYPE="${DUCT_TERRAFORM_BACKEND_TYPE:-}"

# @desc
# @intl false
# @life main
# @deps duct-msg duct-run
# @opts
__duct_terraform_backend() {
  local -a TF_BACKEND_CONFIG=()
  local TF_BACKEND_FILE
  local TF_BACKEND_ITEM
  local TF_BACKEND_KEY
  local TF_BACKEND_VAL

  if [[ "$_DUCT_TERRAFORM_BACKEND_DONE" == false ]]
  then
    if [[ -n "$DUCT_TERRAFORM_BACKEND_TYPE" && "${#DUCT_TERRAFORM_BACKEND_CONFIG[@]}" -ge 1 ]]
    then

      if [[ -n "$DUCT_TERRAFORM_CHDIR" && -d "$DUCT_TERRAFORM_CHDIR" ]]
      then
        TF_BACKEND_FILE="${DUCT_TERRAFORM_CHDIR}/${DUCT_TERRAFORM_BACKEND_FILE}"
      else
        TF_BACKEND_FILE="$DUCT_TERRAFORM_BACKEND_FILE"
      fi

      if [[ "$DUCT_TERRAFORM_BACKEND_REPLACE" != true && -f "$TF_BACKEND_FILE" ]]
      then
        __duct_msg w "$DUCT_TERRAFORM_BACKEND_FILE exists!"
        return
      fi

      __duct_msg n "creating $TF_BACKEND_FILE"

      TF_BACKEND_CONFIG=(
        "terraform {"
        "backend \"${DUCT_TERRAFORM_BACKEND_TYPE}\" {"
      )

      for TF_BACKEND_ITEM in "${DUCT_TERRAFORM_BACKEND_CONFIG[@]}"
      do
        TF_BACKEND_KEY="$( __duct_trim "${TF_BACKEND_ITEM%%=*}" )"
        TF_BACKEND_VAL="$( __duct_trim "${TF_BACKEND_ITEM#*=}" )"

        if [[ "$DUCT_TERRAFORM_BACKEND_MASK" == true && "$TF_BACKEND_KEY" =~ (password|token|secret) ]]
        then
          __duct_msg d "${TF_BACKEND_KEY}=${DUCT_TERRAFORM_BACKEND_MASK_STRING}"
          TF_BACKEND_VAL="$( __duct_debase64 "$TF_BACKEND_VAL" )"
        else
          __duct_msg d "${TF_BACKEND_KEY}=${TF_BACKEND_VAL}"
        fi

        TF_BACKEND_CONFIG+=(
          "${TF_BACKEND_KEY}=\"${TF_BACKEND_VAL}\""
        )
      done

      TF_BACKEND_CONFIG+=(
        "}"
        "}"
      )
      printf "%b\n" "${TF_BACKEND_CONFIG[@]}" | __duct_run "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY" fmt - > "$TF_BACKEND_FILE"

    else
      __duct_msg d "no backend config"
    fi
  fi

  _DUCT_TERRAFORM_BACKEND_DONE=true
}

# @func duct terraform get

declare -r -a _DUCT_TERRAFORM_GET_OPTIONS=(
  -update
)
declare -g _DUCT_TERRAFORM_GET_DONE="${_DUCT_TERRAFORM_GET_DONE:-false}"

declare -g -a DUCT_TERRAFORM_GET_OPTIONS=( "${DUCT_TERRAFORM_GET_OPTIONS[@]:-${_DUCT_TERRAFORM_GET_OPTIONS[@]}}" )

# @desc
# @intl false
# @life main
# @deps
# @opts
__duct_terraform_get() {
  local TF_GET_OPTS=( "$@" )

  if [[ "$_DUCT_TERRAFORM_GET_DONE" == false ]]
  then
    __duct_terraform_run get "${DUCT_TERRAFORM_GET_OPTIONS[@]}" "${TF_GET_OPTS[@]}"
    _DUCT_TERRAFORM_GET_DONE=true
  fi
}

# @func duct terraform init

declare -r -a _DUCT_TERRAFORM_INIT_OPTIONS=(
  -input=false
  -reconfigure
  -upgrade
)

declare -g _DUCT_TERRAFORM_INIT_DONE="${_DUCT_TERRAFORM_INIT_DONE:-false}"

declare -g -a DUCT_TERRAFORM_INIT_OPTIONS=( "${DUCT_TERRAFORM_INIT_OPTIONS[@]:-${_DUCT_TERRAFORM_INIT_OPTIONS[@]}}" )

# @desc
# @intl false
# @life main
# @deps
# @opts
__duct_terraform_init() {
  local -a TF_INIT_OPTS=( "$@" )

  __duct_terraform_config

  if [[ ! "${TF_INIT_OPTS[*]}" =~ (-backend=false) ]]
  then
    __duct_terraform_backend
  fi

  if [[ "$_DUCT_TERRAFORM_INIT_DONE" == false ]]
  then
    __duct_terraform_run init "${DUCT_TERRAFORM_INIT_OPTIONS[@]}" "${TF_INIT_OPTS[@]}" "${TF_INIT_GET[@]}"
    _DUCT_TERRAFORM_INIT_DONE=true
  fi
}

# @func duct terraform fmt

declare -r -a _DUCT_TERRAFORM_FMT_OPTIONS=(
  -check
  -diff
  -list=true
  -recursive
)
declare -g -a DUCT_TERRAFORM_FMT_OPTIONS=( "${DUCT_TERRAFORM_FMT_OPTIONS[@]:-${_DUCT_TERRAFORM_FMT_OPTIONS[@]}}" )

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_fmt() {
  local -a TF_FMT_OPTS=( "$@" )

  __duct_terraform_run fmt "${DUCT_TERRAFORM_FMT_OPTIONS[@]}" "${TF_FMT_OPTS[@]}"
}

# @func duct terraform validate

declare -r -a _DUCT_TERRAFORM_VALIDATE_OPTIONS=()

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_VALIDATE_OPTIONS=( ${DUCT_TERRAFORM_VALIDATE_OPTIONS[@]:-${_DUCT_TERRAFORM_VALIDATE_OPTIONS[@]}} )

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_validate() {
  local -a TF_VALIDATE_OPTS=( "$@" )

  __duct_terraform_init -backend=false

  __duct_terraform_run validate "${DUCT_TERRAFORM_VALIDATE_OPTIONS[@]}" "${TF_VALIDATE_OPTS[@]}"
}

# @func duct terraform plan

declare -r -a _DUCT_TERRAFORM_PLAN_OPTIONS=(
  -input=false
  -parallelism=50
)
declare -g -a DUCT_TERRAFORM_PLAN_OPTIONS=( "${DUCT_TERRAFORM_PLAN_OPTIONS[@]:-${_DUCT_TERRAFORM_PLAN_OPTIONS[@]}}" )
declare -g DUCT_TERRAFORM_PLAN_FILE="${DUCT_TERRAFORM_PLAN_FILE:-"terraform-plan.zip"}"

declare -g DUCT_TERRAFORM_PLAN_JSON="${DUCT_TERRAFORM_PLAN_JSON:-true}"
declare -g DUCT_TERRAFORM_PLAN_JSON_FILE="${DUCT_TERRAFORM_PLAN_JSON_FILE:-"terraform-plan.json"}"

declare -g DUCT_TERRAFORM_PLAN_DESTROY_JSON="${DUCT_TERRAFORM_PLAN_DESTROY_JSON:-true}"
declare -g DUCT_TERRAFORM_PLAN_DESTROY_JSON_FILE="${DUCT_TERRAFORM_PLAN_DESTROY_JSON_FILE:-"terraform-plan-destroy.json"}"
declare -g DUCT_TERRAFORM_PLAN_REPLACE_JSON="${DUCT_TERRAFORM_PLAN_REPLACE_JSON:-true}"
declare -g DUCT_TERRAFORM_PLAN_REPLACE_JSON_FILE="${DUCT_TERRAFORM_PLAN_REPLACE_JSON_FILE:-"terraform-plan-replace.json"}"
declare -g DUCT_TERRAFORM_PLAN_TARGET_JSON="${DUCT_TERRAFORM_PLAN_TARGET_JSON:-true}"
declare -g DUCT_TERRAFORM_PLAN_TARGET_JSON_FILE="${DUCT_TERRAFORM_PLAN_TARGET_JSON_FILE:-"terraform-plan-target.json"}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_plan() {
  local TF_PLAN_OPTS=( "$@" )

  local -a TF_PLAN_OUT

  # plan file to root
  if [[ -n "$DUCT_TERRAFORM_PLAN_FILE" ]]
  then
    TF_PLAN_OUT=( -out="${DUCT_TERRAFORM_WRKDIR}/${DUCT_TERRAFORM_PLAN_FILE}" )
  fi

  __duct_terraform_init
  __duct_terraform_run plan "${DUCT_TERRAFORM_PLAN_OPTIONS[@]}" "${TF_PLAN_OPTS[@]}" "${TF_PLAN_OUT[@]}"
}

# @func duct terraform apply

declare -r -a _DUCT_TERRAFORM_APPLY_OPTIONS=(
  -auto-approve
  -backup=-
  -input=false
  -lock-timeout=60s
  -parallelism=50
)
declare -g -a DUCT_TERRAFORM_APPLY_OPTIONS=( "${DUCT_TERRAFORM_APPLY_OPTIONS[@]:-${_DUCT_TERRAFORM_APPLY_OPTIONS[@]}}" )

declare -g DUCT_TERRAFORM_APPLY_JSON="${DUCT_TERRAFORM_APPLY_JSON:-true}"
declare -g DUCT_TERRAFORM_APPLY_JSON_FILE="${DUCT_TERRAFORM_APPLY_JSON_FILE:-"terraform-apply.json"}"

declare -g DUCT_TERRAFORM_APPLY_DESTROY_JSON="${DUCT_TERRAFORM_APPLY_DESTROY_JSON:-true}"
declare -g DUCT_TERRAFORM_APPLY_DESTROY_JSON_FILE="${DUCT_TERRAFORM_APPLY_DESTROY_JSON_FILE:-"terraform-apply-destroy.json"}"
declare -g DUCT_TERRAFORM_APPLY_REPLACE_JSON="${DUCT_TERRAFORM_APPLY_REPLACE_JSON:-true}"
declare -g DUCT_TERRAFORM_APPLY_REPLACE_JSON_FILE="${DUCT_TERRAFORM_APPLY_REPLACE_JSON_FILE:-"terraform-apply-replace.json"}"
declare -g DUCT_TERRAFORM_APPLY_TARGET_JSON="${DUCT_TERRAFORM_APPLY_TARGET_JSON:-true}"
declare -g DUCT_TERRAFORM_APPLY_TARGET_JSON_FILE="${DUCT_TERRAFORM_APPLY_TARGET_JSON_FILE:-"terraform-apply-target.json"}"

declare -g DUCT_TERRAFORM_APPLY_REMOVE_PLAN="${DUCT_TERRAFORM_APPLY_REMOVE_PLAN:-true}"
declare -g DUCT_TERRAFORM_APPLY_USE_PLAN="${DUCT_TERRAFORM_APPLY_USE_PLAN:-true}"
declare -g DUCT_TERRAFORM_APPLY_PLAN_FILE="${DUCT_TERRAFORM_APPLY_PLAN_FILE:-$DUCT_TERRAFORM_PLAN_FILE}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_apply() {
  local TF_APPLY_OPTS=( "$@" )

  local -a TF_APPLY_PLAN
  local TF_APPLY_PLAN_FILE="${DUCT_TERRAFORM_WRKDIR}/${DUCT_TERRAFORM_APPLY_PLAN_FILE}"

  if [[ "$DUCT_TERRAFORM_APPLY_USE_PLAN" == true && -s "$TF_APPLY_PLAN_FILE" ]]
  then
    __duct_msg d "using plan file: $TF_APPLY_PLAN_FILE"
    TF_APPLY_PLAN+=( "$TF_APPLY_PLAN_FILE" )
  fi

  __duct_terraform_init
  __duct_terraform_run apply "${DUCT_TERRAFORM_APPLY_OPTIONS[@]}" "${TF_APPLY_OPTS[@]}" "${TF_APPLY_PLAN[@]}"

  if [[ "$DUCT_TERRAFORM_APPLY_REMOVE_PLAN" == true && -f "$TF_APPLY_PLAN_FILE" ]]
  then
    __duct_run rm "$TF_APPLY_PLAN_FILE"
  fi
}

# @func duct terraform destroy

declare -r -a _DUCT_TERRAFORM_DESTROY_OPTIONS=(
  -auto-approve
  -backup=-
  -input=false
  -lock-timeout=60s
  -parallelism=50
)

declare -g -a DUCT_TERRAFORM_DESTROY_OPTIONS=( "${DUCT_TERRAFORM_DESTROY_OPTIONS[@]:-${_DUCT_TERRAFORM_DESTROY_OPTIONS[@]}}" )

declare -g DUCT_TERRAFORM_DESTROY_JSON="${DUCT_TERRAFORM_DESTROY_JSON:-true}"
declare -g DUCT_TERRAFORM_DESTROY_JSON_FILE="${DUCT_TERRAFORM_DESTROY_JSON_FILE:-"terraform-destroy.json"}"
declare -g DUCT_TERRAFORM_DESTROY_REMOVE_PLAN="${DUCT_TERRAFORM_DESTROY_REMOVE_PLAN:-false}"
declare -g DUCT_TERRAFORM_DESTROY_USE_PLAN="${DUCT_TERRAFORM_DESTROY_USE_PLAN:-false}"
declare -g DUCT_TERRAFORM_DESTROY_PLAN_FILE="${DUCT_TERRAFORM_DESTROY_PLAN_FILE:-$DUCT_TERRAFORM_PLAN_FILE}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_destroy() {
  local -a TF_DESTROY_OPTS=( "$@" )

  local -a TF_DESTROY_PLAN
  local TF_DESTORY_PLAN_FILE="${DUCT_TERRAFORM_WRKDIR}/${DUCT_TERRAFORM_DESTROY_PLAN_FILE}"

  if [[ "$DUCT_TERRAFORM_DESTROY_USE_PLAN" == true && -s "$TF_DESTORY_PLAN_FILE" ]]
  then
    __duct_msg d "using plan file: $TF_DESTORY_PLAN_FILE"
    TF_DESTROY_PLAN+=( "$TF_DESTORY_PLAN_FILE" )
  fi

  __duct_terraform_init

  if [[ "$DUCT_TERRAFORM_DESTROY_USE_PLAN" == true ]]
  then
    __duct_msg w "running 'apply -destroy' to use plan file!"
    __duct_terraform_run apply -destroy "${DUCT_TERRAFORM_DESTROY_OPTIONS[@]}" "${TF_DESTROY_OPTS[@]}" "${TF_DESTROY_PLAN[@]}"
  else
    __duct_terraform_run destroy "${DUCT_TERRAFORM_DESTROY_OPTIONS[@]}" "${TF_DESTROY_OPTS[@]}"
  fi

  if [[ "$DUCT_TERRAFORM_DESTROY_REMOVE_PLAN" == true && -f "$TF_DESTORY_PLAN_FILE" ]]
  then
    __duct_run rm "$TF_DESTORY_PLAN_FILE"
  fi
}

# @func duct terraform import

declare -r -a _DUCT_TERRAFORM_IMPORT_OPTIONS=()

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_IMPORT_OPTIONS=( ${DUCT_TERRAFORM_IMPORT_OPTIONS[@]:-${_DUCT_TERRAFORM_IMPORT_OPTIONS[@]}} )

# @desc
# @intl
# @life
# @deps
# @opts [import-options] <addr,id> [addr,id...]
__duct_terraform_import() {
  local -a TF_IMPORT_OPTS
  local -a TF_IMPORT_RSCR=()
  local TF_IMPORT_ADDR
  local TF_IMPORT_ID
  local TF_IMPORT_ITEM
  local TF_IMPORT_RC=0

  IFS=" " read -r -a TF_IMPORT_OPTS <<< "$@"

  for TF_IMPORT_ITEM in "${!TF_IMPORT_OPTS[@]}"
  do
    if [[ ! "${TF_IMPORT_OPTS[TF_IMPORT_ITEM]}" =~ ^(-) ]]
    then
      IFS="," read -r TF_IMPORT_ADDR TF_IMPORT_ID <<< "${TF_IMPORT_OPTS[TF_IMPORT_ITEM]}"

      if [[ -z "$TF_IMPORT_ADDR" ]]
      then
        __duct_msg e "no import address! (${TF_IMPORT_OPTS[*]})"
        (( TF_IMPORT_RC+=1 ))

      elif [[ -z "$TF_IMPORT_ID" ]]
      then
        __duct_msg e "no import id! (${TF_IMPORT_OPTS[*]})"
        (( TF_IMPORT_RC+=1 ))
      fi

      if [[ "$TF_IMPORT_RC" -gt 0 ]]
      then
        return 1
      fi

      TF_IMPORT_RSCR+=( "$TF_IMPORT_ADDR $TF_IMPORT_ID" )
      unset "TF_IMPORT_OPTS[TF_IMPORT_ITEM]"
    fi
  done

  for TF_IMPORT_ITEM in "${TF_IMPORT_RSCR[@]}"
  do
    IFS=" " read -r TF_IMPORT_ADDR TF_IMPORT_ID <<< "$TF_IMPORT_ITEM"

    __duct_terraform_init
    __duct_terraform_run import "${DUCT_TERRAFORM_IMPORT_OPTIONS[@]}" "${TF_IMPORT_OPTS[@]}" "$TF_IMPORT_ADDR" "$TF_IMPORT_ID"
  done
}

# @func duct terraform state list

declare -r -a _DUCT_TERRAFORM_STATE_LIST_OPTIONS=()

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_STATE_LIST_OPTIONS=( ${DUCT_TERRAFORM_STATE_LIST_OPTIONS[@]:-${_DUCT_TERRAFORM_STATE_LIST_OPTIONS[@]}} )

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_state_list() {
  local -a TF_STATE_LIST_OPTS=( "$@" )

  __duct_terraform_run state list "${DUCT_TERRAFORM_STATE_LIST_OPTIONS[@]}" "${TF_STATE_LIST_OPTS[@]}"
}

# @func duct terraform state mv

declare -r -a _DUCT_TERRAFORM_STATE_MV_OPTIONS=()

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_STATE_MV_OPTIONS=( ${DUCT_TERRAFORM_STATE_MV_OPTIONS[@]:-${_DUCT_TERRAFORM_STATE_MV_OPTIONS[@]}} )

# @desc
# @intl
# @life
# @deps
# @opts [state-mv-options] <source,destination> [source,destination]
__duct_terraform_state_mv() {
  local -a TF_STATE_MV_OPTS
  local -a TF_STATE_MV_RSCR
  local TF_STATE_MV_DST
  local TF_STATE_MV_ITEM
  local TF_STATE_MV_SRC
  local TF_STATE_MV_RC=0

  IFS=" " read -r -a TF_STATE_MV_OPTS <<< "$@"

  for TF_STATE_MV_ITEM in "${!TF_STATE_MV_OPTS[@]}"
  do
    if [[ ! "${TF_STATE_MV_OPTS[TF_STATE_MV_ITEM]}" =~ ^(-) ]]
    then
      IFS="," read -r TF_STATE_MV_SRC TF_STATE_MV_DST <<< "${TF_STATE_MV_OPTS[TF_STATE_MV_ITEM]}"

      if [[ -z "$TF_STATE_MV_SRC" ]]
      then
        __duct_msg e "no state source! (${TF_STATE_MV_OPTS[*]})"
        (( TF_STATE_MV_RC+=1 ))

      elif [[ -z "$TF_STATE_MV_DST" ]]
      then
        __duct_msg e "no state destination! (${TF_STATE_MV_OPTS[*]})"
        (( TF_STATE_MV_RC+=1 ))
      fi

      if [[ "$TF_STATE_MV_RC" -gt 0 ]]
      then
        return 1
      fi

      TF_STATE_MV_RSCR+=( "$TF_STATE_MV_SRC $TF_STATE_MV_DST" )
      unset "TF_STATE_MV_OPTS[TF_STATE_MV_ITEM]"
    fi
  done

  for TF_STATE_MV_ITEM in "${TF_STATE_MV_RSCR[@]}"
  do
    IFS=" " read -r TF_STATE_MV_SRC TF_STATE_MV_DST <<< "$TF_STATE_MV_ITEM"

    __duct_terraform_init
    __duct_terraform_run state mv "${DUCT_TERRAFORM_STATE_MV_OPTIONS[@]}" "${TF_STATE_MV_OPTS[@]}" "$TF_STATE_MV_SRC" "$TF_STATE_MV_DST"
  done
}

# @func duct terraform state rm

declare -r -a _DUCT_TERRAFORM_STATE_RM_OPTIONS=()

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_STATE_RM_OPTIONS=( ${DUCT_TERRAFORM_STATE_RM_OPTIONS[@]:-${_DUCT_TERRAFORM_STATE_RM_OPTIONS[@]}} )

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_state_rm() {
  local -a TF_STATE_RM_OPTS
  local -a TF_STATE_RM_ADDR=()

  local TF_STATE_RM_ITEM

  # shellcheck disable=SC2068
  for TF_STATE_RM_ITEM in $@
  do
    # options
    if [[ "$TF_STATE_RM_ITEM" =~ ^(-) ]]
    then
      TF_STATE_RM_OPTS+=( "$TF_STATE_RM_ITEM" )

    # resource
    elif [[ "$TF_STATE_RM_ITEM" =~ ^(.*) ]]
    then
      TF_STATE_RM_ADDR+=( "${BASH_REMATCH[1]}" )
    fi
  done

  if [[ "${#TF_STATE_RM_ADDR[@]}" -eq 0 ]]
  then
    __duct_msg e "no resource!"
    return 1
  fi

  for TF_STATE_RM_ITEM in "${TF_STATE_RM_ADDR[@]}"
  do
    __duct_terraform_run state rm "${DUCT_TERRAFORM_STATE_RM_OPTIONS[@]}" "${TF_STATE_RM_OPTS[@]}" "$TF_STATE_RM_ITEM"
  done
}

# @func duct terraform docs

declare -r -a _DUCT_TERRAFORM_DOCS_OPTIONS=()
# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_DOCS_OPTIONS=( ${DUCT_TERRAFORM_DOCS_OPTIONS[@]:-${_DUCT_TERRAFORM_DOCS_OPTIONS[@]}} )
declare -g DUCT_TERRAFORM_DOCS_CONFIG="${DUCT_TERRAFORM_DOCS_CONFIG:-".terraform-docs.yml"}"
declare -g DUCT_TERRAFORM_DOCS_PATH="${DUCT_TERRAFORM_DOCS_PATH:-$PWD}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_docs() {
  local TF_DOCS_OPTS=( "$@" )

  if [[ ! -r "$DUCT_TERRAFORM_DOCS_CONFIG"  ]]
  then
    __duct_msg e "'$DUCT_TERRAFORM_DOCS_CONFIG' not found!"
    return 1
  fi

  __duct_terraform_run terraform-docs "${DUCT_TERRAFORM_DOCS_OPTIONS[@]}" "${TF_DOCS_OPTS[@]}" "$DUCT_TERRAFORM_DOCS_PATH"
}

# @func duct terraform tflint

declare -r -a _DUCT_TERRAFORM_TFLINT_OPTIONS=(
  --color
  --module
  --recursive
)
declare -g _DUCT_TERRAFORM_TFLINT_INIT_DONE="${_DUCT_TERRAFORM_TFLINT_INIT_DONE:-false}"

declare -g -a DUCT_TERRAFORM_TFLINT_OPTIONS=( "${DUCT_TERRAFORM_TFLINT_OPTIONS[@]:-${_DUCT_TERRAFORM_TFLINT_OPTIONS[@]}}" )

declare -g DUCT_TERRAFORM_TFLINT_FORMAT="${DUCT_TERRAFORM_TFLINT_FORMAT:-"default"}"
declare -g DUCT_TERRAFORM_TFLINT_FORMAT_FILE="${DUCT_TERRAFORM_TFLINT_FORMAT_FILE:-}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_tflint() {
  local -a TF_TFLINT_OPTS=( "$@" )

  local -a TF_TFLINT_FORMAT=( --format="$DUCT_TERRAFORM_TFLINT_FORMAT" )

  __duct_terraform_init -backend=false

  if [[ "$_DUCT_TERRAFORM_TFLINT_INIT_DONE" == false ]]
  then
    __duct_terraform_run tflint --init
    _DUCT_TERRAFORM_TFLINT_INIT_DONE=true
  fi

  if [[ -n "$DUCT_TERRAFORM_TFLINT_FORMAT_FILE" ]]
  then
    __duct_msg n "format file: $DUCT_TERRAFORM_TFLINT_FORMAT_FILE"
    __duct_terraform_run tflint "${DUCT_TERRAFORM_TFLINT_OPTIONS[@]}" "${TF_TFLINT_OPTS[@]}" "${TF_TFLINT_FORMAT[@]}" > "$DUCT_TERRAFORM_TFLINT_FORMAT_FILE"
  else
    __duct_terraform_run tflint "${DUCT_TERRAFORM_TFLINT_OPTIONS[@]}" "${TF_TFLINT_OPTS[@]}" "${TF_TFLINT_FORMAT[@]}"
  fi
}

# @func duct terraform tfsec

declare -r -a _DUCT_TERRAFORM_TFSEC_OPTIONS=(
  --force-all-dirs
)

declare -g -a DUCT_TERRAFORM_TFSEC_OPTIONS=( "${DUCT_TERRAFORM_TFSEC_OPTIONS[@]:-${_DUCT_TERRAFORM_TFSEC_OPTIONS[@]}}" )

declare -g DUCT_TERRAFORM_TFSEC_FORMAT="${DUCT_TERRAFORM_TFSEC_FORMAT:-"lovely"}"
declare -g DUCT_TERRAFORM_TFSEC_FORMAT_FILE="${DUCT_TERRAFORM_TFSEC_FORMAT_FILE:-}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_tfsec() {
  local -a TF_TFSEC_OPTS=( "$@" )

  local -a TF_TFSEC_FILE
  local -a TF_TFSEC_FORMAT=( --format="$DUCT_TERRAFORM_TFSEC_FORMAT" )

  __duct_terraform_init -backend=false

  if [[ -n "$DUCT_TERRAFORM_TFSEC_FORMAT_FILE" ]]
  then
    __duct_msg n "format file: $DUCT_TERRAFORM_TFSEC_FORMAT_FILE"
    TF_TFSEC_FILE=( --out="$DUCT_TERRAFORM_TFSEC_FORMAT_FILE" )
  fi

  __duct_terraform_run tfsec "${DUCT_TERRAFORM_TFSEC_OPTIONS[@]}" "${TF_TFSEC_OPTS[@]}" "${TF_TFSEC_FORMAT[@]}" "${TF_TFSEC_FILE[@]}"
}

# @func duct terraform tfswitch

declare -r -a _DUCT_TERRAFORM_TFSWITCH_OPTIONS=()

# shellcheck disable=SC2206
declare -g -a DUCT_TERRAFORM_TFSWITCH_OPTIONS=( ${DUCT_TERRAFORM_TFSWITCH_OPTIONS[@]:-${_DUCT_TERRAFORM_TFSWITCH_OPTIONS[@]}} )
declare -g DUCT_TERRAFORM_TFSWITCH_DEFAULT="${DUCT_TERRAFORM_TFSWITCH_DEFAULT:-}"
declare -g DUCT_TERRAFORM_TFSWITCH_MIRROR="${DUCT_TERRAFORM_TFSWITCH_MIRROR:-"https://releases.hashicorp.com/terraform"}"
declare -g DUCT_TERRAFORM_TFSWITCH_TO_WRKDIR="${DUCT_TERRAFORM_TFSWITCH_TO_WRKDIR:-true}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_tfswitch() {
  local TF_TFSWITCH_OPTS=( "$@" )

  local -a TF_TFSWITCH_DATA
  local TF_TFSWITCH_FILE
  local TF_TFSWITCH_ITEM
  local TF_TFSWITCH_READ=0
  local TF_TFSWITCH_VERSIONS=".terraform.versions"

  if [[ ! "${TF_TFSWITCH_OPTS[*]}" =~ (--mirror=|-m) || ! "${DUCT_TERRAFORM_TFSWITCH_OPTIONS[*]}" =~ (--mirror=|-m) ]]
  then
    TF_TFSWITCH_OPTS+=( --mirror="$DUCT_TERRAFORM_TFSWITCH_MIRROR" )
  fi

  if [[ "$DUCT_TERRAFORM_TFSWITCH_TO_WRKDIR" == true ]]
  then
    if [[ ! -d "${DUCT_TERRAFORM_WRKDIR}/${TF_TFSWITCH_VERSIONS}" ]]
    then
      __duct_run mkdir -p "${DUCT_TERRAFORM_WRKDIR}/${TF_TFSWITCH_VERSIONS}"
    fi

    if [[ -d "${HOME}/${TF_TFSWITCH_VERSIONS}" ]]
    then
      __duct_run rm -r "${HOME}/${TF_TFSWITCH_VERSIONS}"
    fi

    if [[ ! -L "${HOME}/${TF_TFSWITCH_VERSIONS}" ]]
    then
      __duct_run ln -s "${DUCT_TERRAFORM_WRKDIR}/${TF_TFSWITCH_VERSIONS}" "${HOME}/${TF_TFSWITCH_VERSIONS}"
    fi
  fi

  for TF_TFSWITCH_FILE in "${DUCT_TERRAFORM_WRKDIR}/"**.tf
  do
    if [[ -s "$TF_TFSWITCH_FILE"  ]]
    then
      mapfile -t -n 0 TF_TFSWITCH_DATA < "$TF_TFSWITCH_FILE"

      for TF_TFSWITCH_ITEM in "${TF_TFSWITCH_DATA[@]}"
      do
        if [[ "$TF_TFSWITCH_ITEM" =~ ^([[:space:]]+required_version) ]]
        then
          __duct_msg d "using version from $TF_TFSWITCH_FILE"
          TF_TFSWITCH_READ=1
        fi
      done
    fi
  done

  if [[ "$TF_TFSWITCH_READ" -eq 0 ]]
  then
    if [[ -n "$DUCT_TERRAFORM_TFSWITCH_DEFAULT" && "$DUCT_TERRAFORM_TFSWITCH_DEFAULT" != "latest" ]]
    then
      __duct_msg d "using version default $DUCT_TERRAFORM_TFSWITCH_DEFAULT"
      TF_TFSWITCH_OPTS+=( --default="$DUCT_TERRAFORM_TFSWITCH_DEFAULT" )
    else
      __duct_msg d "using version latest"
      TF_TFSWITCH_OPTS+=( --latest )
    fi
  fi

  __duct_terraform_run tfswitch "${DUCT_TERRAFORM_TFSWITCH_OPTIONS[@]}" "${TF_TFSWITCH_OPTS[@]}"
}

# @func duct terraform core version get

declare -g DUCT_TERRAFORM_CORE_GET_VERSION=""
declare -g DUCT_TERRAFORM_CORE_GET_VERSION_FILE="${DUCT_TERRAFORM_CORE_GET_VERSION_FILE:-"versions.tf"}"

# @desc Get current terraform version from file and set `DUCT_TERRAFORM_CORE_GET_VERSION`
# @intl false
# @life main
# @deps duct-msg duct-tools
# @opts [versions-file]
__duct_terraform_core_version_get() {
  local TF_CORE_VERSION_FILE="${1:-$DUCT_TERRAFORM_CORE_GET_VERSION_FILE}"

  local TF_CORE_VERSION=""
  local TF_CORE_VERSION_LINE

  if [[ ! -s "$TF_CORE_VERSION_FILE" ]]
  then
    __duct_msg e "$TF_CORE_VERSION_FILE not found!"
    return 1
  fi

  DUCT_SGREP_RETURN="none" \
  __duct_sgrep '^([[:space:]]+required_version[[:space:]]+=[[:space:]]+\"?([[:space:]0-9.,!=<>~]+)\"?)' "$TF_CORE_VERSION_FILE"

  if [[ "${#DUCT_SGREP_REMATCH[@]}" -ge 1 ]]
  then
    TF_CORE_VERSION="${DUCT_SGREP_REMATCH[-1]}"
    TF_CORE_VERSION_LINE="${DUCT_SGREP_LINE[0]}"

    __duct_msg n "found '$TF_CORE_VERSION' (${TF_CORE_VERSION_FILE}:${TF_CORE_VERSION_LINE})"

    __duct_msg d "set DUCT_TERRAFORM_CORE_GET_VERSION='$TF_CORE_VERSION'"

    # shellcheck disable=SC2034
    DUCT_TERRAFORM_CORE_GET_VERSION="$TF_CORE_VERSION"
  else
    __duct_msg e "terraform version not found! ($TF_CORE_VERSION_FILE)"
    return 1
  fi
}

# @func duct terraform core version latest

declare -g DUCT_TERRAFORM_CORE_VERSION_LATEST_VERSION=""
declare -g DUCT_TERRAFORM_CORE_VERSION_LATEST_BRANCH="${DUCT_TERRAFORM_CORE_VERSION_LATEST_BRANCH:-"latest"}"


# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_core_version_latest() {
  # TODO
  :
}

# @func duct terraform core version set

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_core_version_set() {
  # TODO
  :
}

# @func duct terraform provider version get

declare -g -A DUCT_TERRAFORM_PROVIDER_VERSION_GET=()
declare -g DUCT_TERRAFORM_PROVIDER_VERSION_GET_FILE="${DUCT_TERRAFORM_PROVIDER_VERSION_GET_FILE:-"versions.tf"}"

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_provider_version_get() {
  local TF_PROVIDER_VERSION_FILE="${1:-$DUCT_TERRAFORM_PROVIDER_VERSION_GET_FILE}"

  local TF_PROVIDER_ITEM
  local TF_PROVIDER_LINE=0
  local TF_PROVIDER_SOURCE=""
  local TF_PROVIDER_VERSION=""

  DUCT_SGREP_RETURN="none" \
  __duct_sgrep "^(([[:space:]]+source[[:space:]]+=[[:space:]]+\"?([a-z/]+)\"?)|([[:space:]]+version[[:space:]]+=[[:space:]]+\"?([[:space:]0-9.,!=<>~]+)\"?))" \
    "$TF_PROVIDER_VERSION_FILE"

  if [[ "${#DUCT_SGREP_REMATCH[@]}" -ge 1 ]]
  then
    for TF_PROVIDER_ITEM in "${!DUCT_SGREP_REMATCH[@]}"
    do

      if [[ "${DUCT_SGREP_REMATCH[TF_PROVIDER_ITEM]}" =~ ^([a-z/]+) ]]
      then
        TF_PROVIDER_SOURCE="${DUCT_SGREP_REMATCH[TF_PROVIDER_ITEM]}"
        __duct_msg n "found provider '$TF_PROVIDER_SOURCE' (${TF_PROVIDER_VERSION_FILE}:${DUCT_SGREP_LINE[TF_PROVIDER_LINE]})"
        (( TF_PROVIDER_LINE+=1 ))

      elif [[ "${DUCT_SGREP_REMATCH[TF_PROVIDER_ITEM]}" =~ ^([0-9.,!=<>~]+) ]]
      then
        TF_PROVIDER_VERSION="${DUCT_SGREP_REMATCH[TF_PROVIDER_ITEM]}"
        __duct_msg n "found version '$TF_PROVIDER_VERSION' (${TF_PROVIDER_VERSION_FILE}:${DUCT_SGREP_LINE[TF_PROVIDER_LINE]})"
        (( TF_PROVIDER_LINE+=1 ))
      fi

      if [[ -n "$TF_PROVIDER_SOURCE" && -n "$TF_PROVIDER_VERSION" ]]
      then
        __duct_msg d "set DUCT_TERRAFORM_PROVIDER_VERSION_GET['$TF_PROVIDER_SOURCE']='$TF_PROVIDER_VERSION'"

        # shellcheck disable=SC2034
        DUCT_TERRAFORM_PROVIDER_VERSION_GET["$TF_PROVIDER_SOURCE"]="$TF_PROVIDER_VERSION"

        # reset
        TF_PROVIDER_SOURCE=""
        TF_PROVIDER_VERSION=""
      fi
    done
  else
    __duct_msg w "terraform provider version not found! ($TF_PROVIDER_VERSION_FILE)"
  fi
}

# @func duct terraform provider version latest

declare -g -A DUCT_TERRAFORM_PROVIDER_VERSION_LATEST=()
declare -g -A DUCT_TERRAFORM_PROVIDER_VERSION_LATEST_URL=()

# @desc
# @intl false
# @life
# @deps duct-curl duct-msg duct-jq
# @opts <namespace/provider list>
__duct_terraform_provider_version_latest() {
  local -a TF_PROVIDER_LIST=( "$@" )

  local TF_PROVIDER_DATA
  local TF_PROVIDER_URL
  local TF_PROVIDER_VERSION
  local TF_PROVIDER_ITEM

  if [[ "${#TF_PROVIDER_LIST[@]}" -eq 0 ]]
  then
    __duct_msg e "no provider namespace!"
    return 1
  fi

  for TF_PROVIDER_ITEM in "${TF_PROVIDER_LIST[@]}"
  do
    TF_PROVIDER_DATA="$( __duct_curl "${DUCT_TERRAFORM_REGISTRY_URL}/v1/providers/${TF_PROVIDER_ITEM}" )"

    TF_PROVIDER_VERSION="$( __duct_jq '.version' <<< "$TF_PROVIDER_DATA" )"
    __duct_msg n "found '$TF_PROVIDER_ITEM' latest version '$TF_PROVIDER_VERSION'"
    __duct_msg d "set DUCT_TERRAFORM_PROVIDER_VERSION_LATEST['$TF_PROVIDER_ITEM']='$TF_PROVIDER_VERSION'"

    # shellcheck disable=SC2034
    DUCT_TERRAFORM_PROVIDER_VERSION_LATEST["$TF_PROVIDER_ITEM"]="$TF_PROVIDER_VERSION"

    TF_PROVIDER_URL="$( __duct_jq '.source' <<< "$TF_PROVIDER_DATA" )"
    __duct_msg n "found '$TF_PROVIDER_ITEM' latest url '$TF_PROVIDER_URL'"
    __duct_msg d "set DUCT_TERRAFORM_PROVIDER_VERSION_LATEST_URL['$TF_PROVIDER_ITEM']='$TF_PROVIDER_URL'"

    # shellcheck disable=SC2034
    DUCT_TERRAFORM_PROVIDER_VERSION_LATEST_URL["$TF_PROVIDER_ITEM"]="$TF_PROVIDER_URL"
  done
}

# @func duct terraform provider version set

declare -g DUCT_TERRAFORM_PROVIDER_VERSION_SET_FILE="${DUCT_TERRAFORM_PROVIDER_VERSION_SET_FILE:-"versions.tf"}"

# @desc
# @intl
# @life
# @deps
# @opts <namespace/provider> <version> [version-file]
__duct_terraform_provider_version_set() {
  local TF_PVS_NAME="${1:-}"
  local TF_PVS_VERS="${2:-}"
  local TF_PVS_FILE="${3:-$DUCT_TERRAFORM_PROVIDER_VERSION_SET_FILE}"

  local -a TF_PVS_DATA
  local TF_PVS_CURR
  local TF_PVS_ITEM
  local TF_PVS_LINE
  local TF_PVS_SAVE=0

  mapfile -t -n 0 TF_PVS_DATA < "$TF_PVS_FILE"

  for TF_PVS_ITEM in "${!TF_PVS_DATA[@]}"
  do
    if [[ "${TF_PVS_DATA[TF_PVS_ITEM]}" =~ ^([[:space:]]+source[[:space:]]+=[[:space:]]+\"?(${TF_PVS_NAME})\"?) ]]
    then
      if [[ "${TF_PVS_DATA[TF_PVS_ITEM+1]}" =~ ^([[:space:]]+version[[:space:]]+=[[:space:]]+\"?([[:space:]0-9.,!=<>~]+)\"?) ]]
      then
        TF_PVS_CURR="${BASH_REMATCH[-1]}"
        TF_PVS_LINE="${TF_PVS_DATA[TF_PVS_ITEM+1]}"

        if [[ "$TF_PVS_CURR" != "$TF_PVS_VERS" ]]
        then
          __duct_msg n "set provider '$TF_PVS_NAME' version from '$TF_PVS_CURR' to '$TF_PVS_VERS' (${TF_PVS_FILE}:$(( TF_PVS_ITEM + 2 )))"
          TF_PVS_DATA[TF_PVS_ITEM+1]="${TF_PVS_LINE/$TF_PVS_CURR/$TF_PVS_VERS}"
          TF_PVS_SAVE=1
        else
          __duct_msg n "provider '$TF_PVS_NAME' version already '$TF_PVS_VERS'"
        fi
      else
        __duct_msg w "no provider '$TF_PVS_NAME' version!"
        return
      fi
    fi
  done

  if [[ "$TF_PVS_SAVE" -eq 1 ]]
  then
    __duct_msg d "save $TF_PVS_FILE"
    printf "%b\n" "${TF_PVS_DATA[@]}" > "$TF_PVS_FILE"
  fi
}

# @func duct terraform compare version

# @desc
# @intl false
# @life main
# @deps duct-msg duct-tools
# @opts <version1> <version2>
__duct_terraform_compare_version() {
  local TF_VERSION1="${1:-}"
  local TF_VERSION2="${2:-}"

  if [[ -z "$TF_VERSION1" ]] || [[ -z "$TF_VERSION2" ]]
  then
    __duct_msg e "no versions to compare!"
    return 1
  fi

  # TODO
  if [[ "$TF_VERSION1" =~ (!=|>|>=|<|<=|~>) ]] || [[ "$TF_VERSION2" =~ (!=|>|>=|<|<=|~>) ]]
  then
    __duct_msg w "contraint compare is currently unsupported!"
    return 0
  fi

  # strip =
  TF_VERSION1="${TF_VERSION1//=}"
  TF_VERSION2="${TF_VERSION2//=}"
  # strip space
  TF_VERSION1="${TF_VERSION1// }"
  TF_VERSION2="${TF_VERSION2// }"

  __duct_compare_version "$TF_VERSION1" "$TF_VERSION2"
}

# @func duct terraform module naming

declare -g -A DUCT_TERRAFORM_MODULE_NAMING_INFO=()
declare -g DUCT_TERRAFORM_MODULE_NAMING_REGEX="${DUCT_TERRAFORM_MODULE_NAMING_REGEX:-"^(terraform-([a-z]+)-([a-z0-9_-]+))"}"
declare -g DUCT_TERRAFORM_MODULE_NAMING_REMATCH_NAME="${DUCT_TERRAFORM_MODULE_NAMING_REMATCH_NAME:-3}"
declare -g DUCT_TERRAFORM_MODULE_NAMING_REMATCH_PROVIDER="${DUCT_TERRAFORM_MODULE_NAMING_REMATCH_PROVIDER:-2}"

# @desc Check terraform module naming (set DUCT_TERRAFORM_MODULE_NAMING_INFO).
# @intl false
# @life main
# @deps duct-msg
# @opts <module-name>
__duct_terraform_module_naming() {
  local TF_MODULE_CHECK="${1:-}"

  local TF_MODULE_NAME
  local TF_MODULE_PROVIDER

  if [[ -z "$TF_MODULE_CHECK" ]]
  then
    __duct_msg e "no module name provided!"
    return 1
  fi

  if [[ "$TF_MODULE_CHECK" =~ $DUCT_TERRAFORM_MODULE_NAMING_REGEX ]]
  then
    TF_MODULE_NAME="${BASH_REMATCH[${DUCT_TERRAFORM_MODULE_NAMING_REMATCH_NAME}]}"
    TF_MODULE_PROVIDER="${BASH_REMATCH[${DUCT_TERRAFORM_MODULE_NAMING_REMATCH_PROVIDER}]}"

    __duct_msg n "$TF_MODULE_NAME ($TF_MODULE_PROVIDER)"
    __duct_msg d "set DUCT_TERRAFORM_MODULE_NAMING_INFO['name']='$TF_MODULE_NAME'"
    # shellcheck disable=SC2034
    DUCT_TERRAFORM_MODULE_NAMING_INFO["name"]="$TF_MODULE_NAME"

    __duct_msg d "set DUCT_TERRAFORM_MODULE_NAMING_INFO['provider']='$TF_MODULE_PROVIDER'"
    # shellcheck disable=SC2034
    DUCT_TERRAFORM_MODULE_NAMING_INFO["provider"]="$TF_MODULE_PROVIDER"
  else
    __duct_msg e "$TF_MODULE_CHECK do not match terraform module naming!"
    return 1
  fi
}

# @func duct terraform provider latest

# @desc
# @intl
# @life deprecated
# @deps
# @opts
__duct_terraform_provider_latest() {
  __duct_msg w "use 'duct terraform provider version latest'!"
  __duct_terraform_provider_version_latest "$@"
}

# @func duct terraform provider version

# @desc
# @intl
# @life deprecated
# @deps duct-msg
# @opts
__duct_terraform_provider_version() {
  __duct_msg w "use 'duct terraform provider version get'!"
  __duct_terraform_provider_version_get "$@"
}

# @fcun duct terraform set

# @desc
# @intl
# @life
# @deps
# @opts
__duct_terraform_set() {
  __duct_msg w "use 'duct terraform core version set'!"
  __duct_terraform_core_version_set "$@"
}

# @func duct terraform version

# @desc
# @intl false
# @life deprecated
# @deps
# @opts
__duct_terraform_version() {
  __duct_msg w "use 'duct terraform core version get'!"
  __duct_terraform_core_version_get "$@"
}

# @func duct terraform provider set

# @desc
# @intl
# @life deprecated
# @deps
# @opts
__duct_terraform_provider_set() {
  __duct_msg w "use 'duct terraform provider version set'!"
  __duct_terraform_provider_version_set  "$@"
}

# @func duct terraform load

# @fvar List of duct-terraform requirements.
declare -r -a _DUCT_TERRAFORM_LOAD_REQUIREMENTS=(
  "$DUCT_TERRAFORM_RUN_TERRAFORM_BINARY"
  "$DUCT_TERRAFORM_RUN_TERRAFORM_DOCS_BINARY"
  "$DUCT_TERRAFORM_RUN_TFLINT_BINARY"
  "$DUCT_TERRAFORM_RUN_TFSEC_BINARY"
  "$DUCT_TERRAFORM_RUN_TFSWITCH_BINARY"
)

# @desc Check duct-terraform requirements.
# @intl true
# @life main
# @deps
# @opts
__duct_terraform_load() {
  __duct_intl

  local TF_LOAD_RC=0

  __duct_bin_check "${_DUCT_TERRAFORM_LOAD_REQUIREMENTS[@]}" || TF_LOAD_RC=$?

  return $TF_LOAD_RC
}
