# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-ssh
# OpenSSH stuff.

# ssh keygen

# Number of KDF (key derivation function) rounds to use.
declare -g -i DUCT_SSH_KEYGEN_ROUNDS="${DUCT_SSH_KEYGEN_ROUNDS:-256}"

# Number of bits in the key to create.
declare -g -i DUCT_SSH_KEYGEN_BITS="${DUCT_SSH_KEYGEN_BITS:-4096}"

# The type of key to create.
declare -g DUCT_SSH_KEYGEN_TYPE="${DUCT_SSH_KEYGEN_TYPE:-"ed25519"}"

# Key comment.
declare -g DUCT_SSH_KEYGEN_COMMENT="${DUCT_SSH_KEYGEN_COMMENT:-"duct generated"}"

# Filename of the key file.
declare -g DUCT_SSH_KEYGEN_KEYFILE="${DUCT_SSH_KEYGEN_KEYFILE:-"duct-ssh"}"

# The key passphrase (base64 or plain).
declare -g DUCT_SSH_KEYGEN_PASSPHRASE="${DUCT_SSH_KEYGEN_PASSPHRASE:-}"

# Key format for key generation.
declare -g DUCT_SSH_KEYGEN_FORMAT="${DUCT_SSH_KEYGEN_FORMAT:-"RFC4716"}"

# Remove existing key.
declare -g DUCT_SSH_KEYGEN_REMOVE="${DUCT_SSH_KEYGEN_REMOVE:-false}"

# Add quiet option.
declare -g DUCT_SSH_KEYGEN_QUIET="${DUCT_SSH_KEYGEN_QUIET:-false}"

# deps: duct-msg duct-run
# intl: false
# life: core
# desc: Generate SSH private and public key.
# opts:
__duct_ssh_keygen() {
  local -a SSH_KEYGEN_OPTS=()
  local SSH_KEYGEN_PASSPHRASE=""

  __duct_bin_check "ssh-keygen" || return

  if [[ -z "$DUCT_SSH_KEYGEN_PASSPHRASE" ]]
  then
    __duct_msg w "empty passphrase!"
  else
    SSH_KEYGEN_PASSPHRASE=$( __duct_debase64 "$DUCT_SSH_KEYGEN_PASSPHRASE" )
  fi

  if [[ "$DUCT_SSH_KEYGEN_QUIET" == true ]]
  then
    SSH_KEYGEN_OPTS+=( -q )
  fi

  if [[ -e "$DUCT_SSH_KEYGEN_KEYFILE" ]]
  then
    if [[ "$DUCT_SSH_KEYGEN_REMOVE" == true ]]
    then
      __duct_msg w "removing $DUCT_SSH_KEYGEN_KEYFILE"
      __duct_run rm -f "$DUCT_SSH_KEYGEN_KEYFILE" "${DUCT_SSH_KEYGEN_KEYFILE}.pub"
    else
      __duct_msg w "$DUCT_SSH_KEYGEN_KEYFILE exists!"
      return
    fi
  fi

  DUCT_RUN_MASK_MATCH='(ssh-keygen .* -N (.*) -t)' \
  DUCT_RUN_MASK_INDEX=2 \
  __duct_run ssh-keygen "${SSH_KEYGEN_OPTS[@]}" \
    -a "$DUCT_SSH_KEYGEN_ROUNDS" -b "$DUCT_SSH_KEYGEN_BITS" -C "$DUCT_SSH_KEYGEN_COMMENT" -f "$DUCT_SSH_KEYGEN_KEYFILE" \
    -m "$DUCT_SSH_KEYGEN_FORMAT" -N "$SSH_KEYGEN_PASSPHRASE" \
    -t "$DUCT_SSH_KEYGEN_TYPE"

  __duct_msg n "generated $DUCT_SSH_KEYGEN_KEYFILE ${DUCT_SSH_KEYGEN_KEYFILE}.pub"
}
readonly -f __duct_ssh_keygen

# ssh keyscan

# Host for SSH key scan.
declare -g DUCT_SSH_KEYSCAN_HOST="${DUCT_SSH_KEYSCAN_HOST:-}"

# Timeout for SSH key scan.
declare -g -i DUCT_SSH_KEYSCAN_TIMEOUT="${DUCT_SSH_KEYSCAN_TIMEOUT:-5}"

# deps: duct-msg duct-util
# intl: false
# life: core
# desc: Scan host for SSH keys.
# opts: [host]
__duct_ssh_keyscan() {
  local SSH_KEYSCAN_HOST="${1:-$DUCT_SSH_KEYSCAN_HOST}"

  local SSH_KEYSCAN_KEY
  local SSH_KEYSCAN_TYPE

  if [[ -z "${SSH_KEYSCAN_HOST}" ]]
  then
    __duct_msg e "no host! (${DUCT_SCRIPT_NAME}:${BASH_LINENO[1]})"
    return 1
  fi

  __duct_bin_check "ssh-keyscan" || return

  readarray -t SSH_KEYSCAN < <( __duct_run ssh-keyscan -T "$DUCT_SSH_KEYSCAN_TIMEOUT" "$SSH_KEYSCAN_HOST" )

  if [[ "${#SSH_KEYSCAN[@]}" -lt 1 ]]
  then
    __duct_msg e "$SSH_KEYSCAN_HOST no SSH keys!"
    return 1
  fi

  for VAL in "${SSH_KEYSCAN[@]}"
  do
    if [[ "$VAL" =~ ^(($SSH_KEYSCAN_HOST) (ssh-[a-z0-9]+) (.*)) ]]
    then
      SSH_KEYSCAN_TYPE="${BASH_REMATCH[3]}"
      SSH_KEYSCAN_KEY="${BASH_REMATCH[4]}"

      printf "%b\n" "$SSH_KEYSCAN_HOST $SSH_KEYSCAN_TYPE $SSH_KEYSCAN_KEY"
    fi
  done
}
readonly -f __duct_ssh_keyscan

# ssh agent

# Optional SSH key to add to the agent (base64 or plain).
declare -g DUCT_SSH_AGENT_KEY_ADD="${DUCT_SSH_AGENT_KEY_ADD:-}"

# Optional SSH key passphrase (base64 or plain).
declare -g DUCT_SSH_AGENT_KEY_PASSPHRASE="${DUCT_SSH_AGENT_KEY_PASSPHRASE:-}"

# deps: duct-msg duct-util
# intl: false
# life: core
# desc: Start the SSH agent.
# opts:
__duct_ssh_agent() {
  local -a SSH_AGENT_ASKPASS_DATA
  local -i SSH_AGENT_RUN=0
  local SSH_AGENT_ASKPASS
  local SSH_AGENT_ENV
  local SSH_AGENT_KEY_ADD
  local SSH_AGENT_KEY_PASSPHRASE

  __duct_bin_check "ssh-agent" || return
  __duct_bin_check "ssh-add" || return

  set +u
  # check pid
  if [[ -n "$SSH_AGENT_PID" ]]
  then
    __duct_msg n "SSH agent process ID found ($SSH_AGENT_PID)"
  else
    (( SSH_AGENT_RUN+=1 ))
  fi

  # check socket
  if [[ -n "$SSH_AUTH_SOCK" ]]
  then
    __duct_msg n "SSH agent socket found ($SSH_AUTH_SOCK)"
  else
    (( SSH_AGENT_RUN+=1 ))
  fi
  set -u

  if [[ "$SSH_AGENT_RUN" -eq 2 ]]
  then
    __duct_msg n "start SSH agent"

    SSH_AGENT_ENV="$( DUCT_MSG_MAX_LEVEL=0 DUCT_MKTMPFILE_PREFIX="duct-ssh-agent-" __duct_mktmpfile )"

    DUCT_RUN_OUTPUT="$SSH_AGENT_ENV" \
    __duct_run out ssh-agent -s >/dev/null
    __duct_source "$SSH_AGENT_ENV" && \
    __duct_run rm -f "$SSH_AGENT_ENV"
  fi

  if [[ -n "$DUCT_SSH_AGENT_KEY_ADD" ]]
  then
    __duct_msg d "SSH key"
    SSH_AGENT_KEY_ADD="$( __duct_debase64 "$DUCT_SSH_AGENT_KEY_ADD" )"

    if [[ -n "$DUCT_SSH_AGENT_KEY_PASSPHRASE" ]]
    then
      __duct_msg d "SSH key passphrase"
      SSH_AGENT_KEY_PASSPHRASE="$( __duct_debase64 "$DUCT_SSH_AGENT_KEY_PASSPHRASE" )"
      SSH_AGENT_ASKPASS="$( DUCT_MSG_MAX_LEVEL=0 DUCT_MKTMPFILE_PREFIX="duct-ssh-askpass-" DUCT_MKTMPFILE_MODE="0700" __duct_mktmpfile )"

      __duct_msg d "SSH askpass ($SSH_AGENT_ASKPASS)"
      SSH_AGENT_ASKPASS_DATA=(
        "#!/usr/bin/env bash"
        "echo \"$SSH_AGENT_KEY_PASSPHRASE\""
      )
      printf "%b\n" "${SSH_AGENT_ASKPASS_DATA[@]}" > "$SSH_AGENT_ASKPASS"

      export SSH_ASKPASS="$SSH_AGENT_ASKPASS"
      export SSH_ASKPASS_REQUIRE="force"
    fi

    __duct_msg n "add SSH key"
    __duct_run ssh-add - <<< "$SSH_AGENT_KEY_ADD" && \
    __duct_run rm -f "$SSH_AGENT_ASKPASS"

    unset SSH_ASKPASS
    unset SSH_ASKPASS_REQUIRE
    unset SSH_AGENT_ASKPASS_DATA
  fi
}
readonly -f __duct_ssh_agent

# ssh agent kill
__duct_ssh_agent_kill() {

  set +u
  # check pid
  if [[ -n "$SSH_AGENT_PID" ]]
  then
    __duct_msg n "kill SSH agent ($SSH_AGENT_PID)"

    kill "$SSH_AGENT_PID" || return
    unset SSH_AGENT_PID
    unset SSH_AUTH_SOCK
  else
    __duct_msg w "no SSH agent found!"
  fi
  set -u
}
readonly -f __duct_ssh_agent_kill
