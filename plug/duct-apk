# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# duct-apk
# Alpine Linux APK operations.

# APK options (defaults).
declare -a -r _DUCT_APK_OPTIONS=(
  --latest
  --no-cache
  --prune
  --purge
  --upgrade
)

# APK packages (defaults).
declare -a -r _DUCT_APK_PACKAGES=()

# APK binary to use.
declare -g DUCT_APK_BIN="${DUCT_APK_BIN:-"apk"}"

# Use `sudo` for APK operations (auto disabled for uid 0).
declare -g DUCT_APK_SUDO="${DUCT_APK_SUDO:-true}"

# Enable/disable APK update run.
declare -g DUCT_APK_UPDATE="${DUCT_APK_UPDATE:-true}"

# Enable/disable APK upgrade run.
declare -g DUCT_APK_UPGRADE="${DUCT_APK_UPGRADE:-true}"

# APK options.
declare -g -a DUCT_APK_OPTIONS=( "${DUCT_APK_OPTIONS[@]:-${_DUCT_APK_OPTIONS[@]}}" )

# shellcheck disable=SC2206
# APK packages to install.
declare -g -a DUCT_APK_PACKAGES=( ${DUCT_APK_PACKAGES[@]:-${_DUCT_APK_PACKAGES[@]}} )

# apk support

# deps: duct-msg duct-util
# intl: true
# life: beta
# desc: Detect OS and check APK binary.
# opts:
__duct_apk_support() {
  __duct_ostype

  case "$DUCT_OSTYPE"
  in
    linux*)
      __duct_source /etc/os-release OS_RELEASE
      __duct_msg n "$OS_RELEASE_PRETTY_NAME"

      if ! __duct_checkbin "$DUCT_APK_BIN"
      then
        __duct_msg e "unsupported linux distribution!"
        return 1
      fi
    ;;
    *)
      __duct_msg e "$DUCT_OSTYPE is unsupported!"
      return 127
    ;;
  esac
}
readonly -f __duct_apk_support

# apk

# dependencies: duct-msg duct-run
# internal: false
# lifecycle: beta
# description: Update, (dist-)upgrade & install APK packages.
# options: [packages]
__duct_apk() {
  # shellcheck disable=SC2206
  local -a APK_PACKAGES=( ${DUCT_APK_PACKAGES[@]:-$@} )
  local APK_RC=0
  local APK_SUDO=""

  __duct_apk_support || APK_RC=$?

  if [[ "$APK_RC" -gt 0 ]]
  then
    return $APK_RC
  fi

  if [[ "$DUCT_APK_SUDO" == true ]]
  then
    APK_SUDO="sudo"

  elif [[ "$UID" -gt 0 ]]
  then
    __duct_msg d "forcing sudo for $UID"
    APK_SUDO="sudo"
  fi

  if [[ "$UID" -eq 0 ]]
  then
    __duct_msg d "disable sudo for $UID"
    APK_SUDO=""
  fi

  # shellcheck disable=SC2086
  if [[ "$DUCT_APK_UPDATE"  == true ]] || [[ "$DUCT_APK_UPGRADE" == true ]]
  then
    __duct_run $APK_SUDO "$DUCT_APK_BIN" update
  fi

  # shellcheck disable=SC2086
  if [[ "$DUCT_APK_UPGRADE" == true ]]
  then
    __duct_run $APK_SUDO "$DUCT_APK_BIN" upgrade "${DUCT_APK_OPTIONS[@]}"
  fi

  # shellcheck disable=SC2086
  if [[ "${#APK_PACKAGES[@]}" -gt 0 ]]
  then
    __duct_run $APK_SUDO "$DUCT_APK_BIN" add "${DUCT_APK_OPTIONS[@]}" "${APK_PACKAGES[@]}"
  fi
}
readonly -f __duct_apk
