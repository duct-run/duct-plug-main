# vim: set ft=sh syn=bash :
# shellcheck shell=bash

#
# Copyright (C) 2022-2023 Chris 'sh0shin' Frage
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

# @plug duct-python
# @desc Python operations.

# @func duct python pip

# @fvar Python pip options (defaults).
declare -r -a _DUCT_PYTHON_PIP_OPTIONS=(
  --isolated
  --no-cache-dir
  --no-compile
  --no-input
  --prefer-binary
  --upgrade
)

# @fvar Python pip requirements to install (defaults).
declare -r -a _DUCT_PYTHON_PIP_REQUIREMENTS=()

# @fvar Python pip binary.
declare -g DUCT_PYTHON_PIP_BINARY="${DUCT_PYTHON_PIP_BINARY:-"pip3"}"

# @fvar Python pip options.
declare -g -a DUCT_PYTHON_PIP_OPTIONS=( "${DUCT_PYTHON_PIP_OPTIONS[@]:-${_DUCT_PYTHON_PIP_OPTIONS[@]}}" )

# shellcheck disable=SC2206
# @fvar Python pip requirements to install (may also be a requirements file).
declare -g -a DUCT_PYTHON_PIP_REQUIREMENTS=( ${DUCT_PYTHON_PIP_REQUIREMENTS[@]:-${_DUCT_PYTHON_PIP_REQUIREMENTS[@]}} )

# @desc Install or upgrade Python packages in a virtual environment (uses `DUCT_PYTHON_VENV_PATH`).
# @intl false
# @life main
# @deps duct-array duct-msg duct-run
# @opts [requirements|requirements-file]
__duct_python_pip() {
  local -a PIP_REQ=( "${@:-${DUCT_PYTHON_PIP_REQUIREMENTS[@]}}" )

  local -a PIP_REQ_FILES=()
  local PIP_ITEM

  if [[ "${#PIP_REQ}" -eq 0 ]]
  then
    __duct_msg w "no requirements"
    return 0
  fi

  if [[ -z "$DUCT_PYTHON_VENV_PATH" ]]
  then
    __duct_msg e "no venv path!"
    return 1
  fi

  if [[ ! -d "$DUCT_PYTHON_VENV_PATH" ]]
  then
    __duct_msg e "$DUCT_PYTHON_VENV_PATH not found!"
    return 1
  fi

  if [[ ! -f "${DUCT_PYTHON_VENV_PATH}/bin/activate" ]]
  then
    __duct_msg e "$DUCT_PYTHON_VENV_PATH not a python venv!"
    return 1
  else
    __duct_msg n "activating $DUCT_PYTHON_VENV_PATH"
    __duct_run source "${DUCT_PYTHON_VENV_PATH}/bin/activate"
  fi

  for PIP_ITEM in "${PIP_REQ[@]}"
  do
    if [[ -f "$PIP_ITEM" ]]
    then
      __duct_msg d "adding requirements file $PIP_ITEM"
      PIP_REQ_FILES+=( "$PIP_ITEM" )

      __duct_array_strip "PIP_REQ" "^${PIP_ITEM}$"
    fi
  done

  if [[ "${#PIP_REQ[@]}" -gt 0 ]]
  then
    __duct_msg n "installing ${PIP_REQ[*]}"
    __duct_run "$DUCT_PYTHON_PIP_BINARY" install "${DUCT_PYTHON_PIP_OPTIONS[@]}" "${PIP_REQ[@]}"
  fi

  for PIP_ITEM in "${PIP_REQ_FILES[@]}"
  do
    __duct_msg n "installing from $PIP_ITEM"
    __duct_run "$DUCT_PYTHON_PIP_BINARY" install "${DUCT_PYTHON_PIP_OPTIONS[@]}" --requirement "$PIP_ITEM"
  done
}
readonly -f __duct_python_pip

# @func duct python venv

# @fvar Python venv options (defaults).
declare -r -a _DUCT_PYTHON_VENV_OPTIONS=(
  --copies
)

# @fvar Base packages to install or upgrade in the venv (defaults).
declare -r -a _DUCT_PYTHON_VENV_PACKAGES=(
  pip
  setuptools
  wheel
)

# @fvar Clear/remove existing Python venv.
declare -g DUCT_PYTHON_VENV_CLEAR=${DUCT_PYTHON_VENV_CLEAR:-false}

# @fvar Deactivate Python venv after creation.
declare -g DUCT_PYTHON_VENV_DEACTIVATE=${DUCT_PYTHON_VENV_DEACTIVATE:-false}

# @fvar Python binary/interpreter.
declare -g DUCT_PYTHON_VENV_BINARY=${DUCT_PYTHON_VENV_BINARY:-"python3"}

# @fvar Python venv options.
declare -g -a DUCT_PYTHON_VENV_OPTIONS=( "${DUCT_PYTHON_VENV_OPTIONS[@]:-${_DUCT_PYTHON_VENV_OPTIONS[@]}}" )

# @fvar Base packages to install or upgrade in the venv.
declare -g -a DUCT_PYTHON_VENV_PACKAGES=( "${DUCT_PYTHON_VENV_PACKAGES[@]:-${_DUCT_PYTHON_VENV_PACKAGES[@]}}" )

# Path to the Python venv
declare -g DUCT_PYTHON_VENV_PATH="${TMPDIR:-"/tmp"}/duct-python-venv"

# @desc Create or upgrade a Python **v**irtual **env**ironment and install base packages.
# @intl false
# @life main
# @deps duct-msg duct-run duct-util
# @opts [venv-path]
__duct_python_venv() {
  local VENV_PATH="${1:-"$DUCT_PYTHON_VENV_PATH"}"
  local -a VENV_OPTS=()
  local VENV_RC=0
  local VENV_MSG="creating"

  if [[ -z "$VENV_PATH" ]]
  then
    __duct_msg e "no venv path!"
    return 1
  fi

  if [[ -d "$VENV_PATH" ]]
  then
    if [[ "$DUCT_PYTHON_VENV_CLEAR" == true ]]
    then
      __duct_msg w "$VENV_PATH exists, clearing!"
      VENV_OPTS+=( --clear )
      VENV_MSG="clearing"
    else
      VENV_OPTS+=( --upgrade )
      VENV_MSG="upgrading"
    fi
  fi

  __duct_msg n "$VENV_MSG $VENV_PATH"
  __duct_run "$DUCT_PYTHON_VENV_BINARY" -m venv "${DUCT_PYTHON_VENV_OPTIONS[@]}" "${VENV_OPTS[@]}" "$VENV_PATH" || VENV_RC=$?

  if [[ -d "$VENV_PATH/lib" ]]
  then
    (
      cd "$VENV_PATH/lib" || return

      if [[ ! -L "python" ]]
      then
        __duct_msg d "linking python version"
        __duct_run ln -s python* python
      fi
    )
  fi

  if [[ "${#DUCT_PYTHON_VENV_PACKAGES}" -gt 0 ]]
  then
    __duct_python_pip "${DUCT_PYTHON_VENV_PACKAGES[@]}"
  fi

  if [[ "$DUCT_PYTHON_VENV_DEACTIVATE" == true ]] && [[ "$VIRTUAL_ENV" == "$VENV_PATH" ]]
  then
    __duct_msg n "deactivating $VENV_PATH"
    deactivate
  fi

  return $VENV_RC
}

# @func duct python load

# @fvar List of duct-python requirements.
declare -r -a _DUCT_PYTHON_LOAD_REQUIREMENTS=(
  "$DUCT_PYTHON_VENV_BINARY"
  "$DUCT_PYTHON_PIP_BINARY"
)

# @desc Check duct-python requirements.
# @intl true
# @life main
# @deps duct-util
# @opts
__duct_python_load() {
  __duct_intl
  __duct_bin_check "${_DUCT_PYTHON_LOAD_REQUIREMENTS[@]}"
}
